/**
 * Copyright (C) 2014 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.sesame.marketdata;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.ImmutableConstructor;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;
import org.threeten.bp.LocalDate;
import org.threeten.bp.ZoneOffset;
import org.threeten.bp.ZonedDateTime;

import com.google.common.collect.ImmutableMap;
import com.opengamma.timeseries.date.DateTimeSeries;
import com.opengamma.util.ArgumentChecker;

/**
 * Simple market data environment containing market data items in maps.
 * It does not support deep comparison operations.
 */
@BeanDefinition(builderScope = "private")
public final class MapMarketDataEnvironment implements MarketDataEnvironment, ImmutableBean, Serializable {
  private static final long serialVersionUID = 1L;

  /** Single items of market data, keyed by their ID. */
  @PropertyDefinition(validate = "notNull")
  private final ImmutableMap<SingleValueRequirement, Object> _data;

  /** Time series of market data, keyed by the ID of the market data they contain. */
  @PropertyDefinition(validate = "notNull")
  private final ImmutableMap<MarketDataId<?>, DateTimeSeries<LocalDate, ?>> _timeSeries;

  /** Valuation time used for the scenario. */
  @PropertyDefinition(validate = "notNull")
  private final ZonedDateTime _valuationTime;

  @ImmutableConstructor
  MapMarketDataEnvironment(Map<SingleValueRequirement, Object> data,
                           Map<MarketDataId<?>, DateTimeSeries<LocalDate, ?>> timeSeries,
                           ZonedDateTime valuationTime) {
    ArgumentChecker.notNull(data, "data");
    ArgumentChecker.notNull(timeSeries, "timeSeries");
    ArgumentChecker.notNull(valuationTime, "valuationTime");
    _data = ImmutableMap.copyOf(data);
    _timeSeries = ImmutableMap.copyOf(timeSeries);
    _valuationTime = valuationTime.withZoneSameInstant(ZoneOffset.UTC);
  }

  @Override
  public MarketDataEnvironmentBuilder toBuilder() {
    return new MarketDataEnvironmentBuilder(_valuationTime, _data, _timeSeries);
  }

  @Override
  public MarketDataBundle toBundle() {
    return new MapMarketDataBundle(this);
  }
  
  // NOTE kirk 2016-02-11 -- This intentionally uses the default Object
  // semantics. Because this object is immutable, the only case in which
  // this is not correct is when there are two MapMarketDataEnvironment
  // instances with the same data contents. However, as the primary
  // purpose of these existing at all is to support function memoization,
  // this is acceptable as the worst case is that fewer things will be
  // memoized.

  @Override
  public boolean equals(Object obj) {
    return this == obj;
  }

  @Override
  public int hashCode() {
    return super.hashCode();
  }


  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code MapMarketDataEnvironment}.
   * @return the meta-bean, not null
   */
  public static MapMarketDataEnvironment.Meta meta() {
    return MapMarketDataEnvironment.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(MapMarketDataEnvironment.Meta.INSTANCE);
  }

  @Override
  public MapMarketDataEnvironment.Meta metaBean() {
    return MapMarketDataEnvironment.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets single items of market data, keyed by their ID.
   * @return the value of the property, not null
   */
  public ImmutableMap<SingleValueRequirement, Object> getData() {
    return _data;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets time series of market data, keyed by the ID of the market data they contain.
   * @return the value of the property, not null
   */
  public ImmutableMap<MarketDataId<?>, DateTimeSeries<LocalDate, ?>> getTimeSeries() {
    return _timeSeries;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets valuation time used for the scenario.
   * @return the value of the property, not null
   */
  public ZonedDateTime getValuationTime() {
    return _valuationTime;
  }

  //-----------------------------------------------------------------------
  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(128);
    buf.append("MapMarketDataEnvironment{");
    buf.append("data").append('=').append(getData()).append(',').append(' ');
    buf.append("timeSeries").append('=').append(getTimeSeries()).append(',').append(' ');
    buf.append("valuationTime").append('=').append(JodaBeanUtils.toString(getValuationTime()));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code MapMarketDataEnvironment}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code data} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<ImmutableMap<SingleValueRequirement, Object>> _data = DirectMetaProperty.ofImmutable(
        this, "data", MapMarketDataEnvironment.class, (Class) ImmutableMap.class);
    /**
     * The meta-property for the {@code timeSeries} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<ImmutableMap<MarketDataId<?>, DateTimeSeries<LocalDate, ?>>> _timeSeries = DirectMetaProperty.ofImmutable(
        this, "timeSeries", MapMarketDataEnvironment.class, (Class) ImmutableMap.class);
    /**
     * The meta-property for the {@code valuationTime} property.
     */
    private final MetaProperty<ZonedDateTime> _valuationTime = DirectMetaProperty.ofImmutable(
        this, "valuationTime", MapMarketDataEnvironment.class, ZonedDateTime.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "data",
        "timeSeries",
        "valuationTime");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 3076010:  // data
          return _data;
        case 779431844:  // timeSeries
          return _timeSeries;
        case 113591406:  // valuationTime
          return _valuationTime;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends MapMarketDataEnvironment> builder() {
      return new MapMarketDataEnvironment.Builder();
    }

    @Override
    public Class<? extends MapMarketDataEnvironment> beanType() {
      return MapMarketDataEnvironment.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code data} property.
     * @return the meta-property, not null
     */
    public MetaProperty<ImmutableMap<SingleValueRequirement, Object>> data() {
      return _data;
    }

    /**
     * The meta-property for the {@code timeSeries} property.
     * @return the meta-property, not null
     */
    public MetaProperty<ImmutableMap<MarketDataId<?>, DateTimeSeries<LocalDate, ?>>> timeSeries() {
      return _timeSeries;
    }

    /**
     * The meta-property for the {@code valuationTime} property.
     * @return the meta-property, not null
     */
    public MetaProperty<ZonedDateTime> valuationTime() {
      return _valuationTime;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 3076010:  // data
          return ((MapMarketDataEnvironment) bean).getData();
        case 779431844:  // timeSeries
          return ((MapMarketDataEnvironment) bean).getTimeSeries();
        case 113591406:  // valuationTime
          return ((MapMarketDataEnvironment) bean).getValuationTime();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code MapMarketDataEnvironment}.
   */
  private static final class Builder extends DirectFieldsBeanBuilder<MapMarketDataEnvironment> {

    private Map<SingleValueRequirement, Object> _data = new HashMap<SingleValueRequirement, Object>();
    private Map<MarketDataId<?>, DateTimeSeries<LocalDate, ?>> _timeSeries = new HashMap<MarketDataId<?>, DateTimeSeries<LocalDate, ?>>();
    private ZonedDateTime _valuationTime;

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 3076010:  // data
          return _data;
        case 779431844:  // timeSeries
          return _timeSeries;
        case 113591406:  // valuationTime
          return _valuationTime;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @SuppressWarnings("unchecked")
    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 3076010:  // data
          this._data = (Map<SingleValueRequirement, Object>) newValue;
          break;
        case 779431844:  // timeSeries
          this._timeSeries = (Map<MarketDataId<?>, DateTimeSeries<LocalDate, ?>>) newValue;
          break;
        case 113591406:  // valuationTime
          this._valuationTime = (ZonedDateTime) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public MapMarketDataEnvironment build() {
      return new MapMarketDataEnvironment(
          _data,
          _timeSeries,
          _valuationTime);
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(128);
      buf.append("MapMarketDataEnvironment.Builder{");
      buf.append("data").append('=').append(JodaBeanUtils.toString(_data)).append(',').append(' ');
      buf.append("timeSeries").append('=').append(JodaBeanUtils.toString(_timeSeries)).append(',').append(' ');
      buf.append("valuationTime").append('=').append(JodaBeanUtils.toString(_valuationTime));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
