/**
 * Copyright (C) 2014 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.sesame.function.scenarios;

import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.ImmutableListMultimap;
import com.google.common.collect.ListMultimap;
import com.opengamma.util.ArgumentChecker;

/**
 * A definition for the parts of a scenario that apply to a single column or non-portfolio output in a view.
 * <p>
 * A definition contains multiple instances of {@link ScenarioArgument}, each of which defines a transformation
 * to apply to the calculated values.
 * <p>
 * A filtered definition is typically obtained by {@link ScenarioDefinition#filter(String) filtering} a
 * {@link ScenarioDefinition}.
 *
 * @deprecated use the new scenario framework
 */
@Deprecated
@BeanDefinition
public final class FilteredScenarioDefinition implements ImmutableBean {

  /** A definition containing no arguments. */
  public static final FilteredScenarioDefinition EMPTY = new FilteredScenarioDefinition();

  /** Arguments for scenario functions, keyed by the type of the function that consumes them. */
  @PropertyDefinition(validate = "notNull", get = "private")
  private final ImmutableListMultimap<Class<?>, ScenarioArgument<?, ?>> _arguments;

  /**
   * @param arguments  arguments defining the transformations in the scenario
   */
  public FilteredScenarioDefinition(ScenarioArgument<?, ?>... arguments) {
    this(Arrays.asList(arguments));
  }

  /**
   * @param arguments  arguments defining the transformations in the scenario
   */
  public FilteredScenarioDefinition(List<ScenarioArgument<?, ?>> arguments) {
    ArgumentChecker.notNull(arguments, "arguments");
    ImmutableListMultimap.Builder<Class<?>, ScenarioArgument<?, ?>> argBuilder = ImmutableListMultimap.builder();

    for (ScenarioArgument<?, ?> argument : arguments) {
      argBuilder.put(argument.getFunctionType(), argument);
    }
    _arguments = argBuilder.build();
  }

  private FilteredScenarioDefinition(ImmutableListMultimap<Class<?>, ScenarioArgument<?, ?>> arguments) {
    _arguments = arguments;
  }

  /**
   * Returns the arguments for the specified function.
   *
   * @param scenarioFunction  a function
   * @param <A>  the type of the scenario arguments consumed by the function
   * @return  the arguments for the function, possibly empty
   */
  @SuppressWarnings("unchecked")
  public <A extends ScenarioArgument<A, F>, F extends ScenarioFunction<A, F>> List<A> getArguments(
      ScenarioFunction<A, F> scenarioFunction) {
    ArgumentChecker.notNull(scenarioFunction, "scenarioFunction");
    return (List<A>) _arguments.get(scenarioFunction.getClass());
  }

  /**
   * @return  whether this definition is empty
   */
  public boolean isEmpty() {
    return _arguments.isEmpty();
  }

  /**
   * Returns a scenario definition that only contains arguments consumed by the specified function types.
   * <p>
   * This allows optimizations in the caching implementation.
   *
   * @param functionTypes  function types whose arguments are required
   * @return  a scenario definition that only contains arguments consumed by the specified function types.
   */
  public FilteredScenarioDefinition forFunctions(Set<Class<?>> functionTypes) {
    Map<Class<?>, Collection<ScenarioArgument<?, ?>>> filtered = new HashMap<>(_arguments.asMap());
    filtered.keySet().retainAll(functionTypes);
    ImmutableListMultimap.Builder<Class<?>, ScenarioArgument<?, ?>> builder = ImmutableListMultimap.builder();

    for (Map.Entry<Class<?>, Collection<ScenarioArgument<?, ?>>> entry : filtered.entrySet()) {
      Class<?> decoratorType = entry.getKey();
      Collection<ScenarioArgument<?, ?>> args = entry.getValue();
      builder.putAll(decoratorType, args);
    }
    return new FilteredScenarioDefinition(builder.build());
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code FilteredScenarioDefinition}.
   * @return the meta-bean, not null
   */
  public static FilteredScenarioDefinition.Meta meta() {
    return FilteredScenarioDefinition.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(FilteredScenarioDefinition.Meta.INSTANCE);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static FilteredScenarioDefinition.Builder builder() {
    return new FilteredScenarioDefinition.Builder();
  }

  private FilteredScenarioDefinition(
      ListMultimap<Class<?>, ScenarioArgument<?, ?>> arguments) {
    JodaBeanUtils.notNull(arguments, "arguments");
    this._arguments = ImmutableListMultimap.copyOf(arguments);
  }

  @Override
  public FilteredScenarioDefinition.Meta metaBean() {
    return FilteredScenarioDefinition.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets arguments for scenario functions, keyed by the type of the function that consumes them.
   * @return the value of the property, not null
   */
  private ImmutableListMultimap<Class<?>, ScenarioArgument<?, ?>> getArguments() {
    return _arguments;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      FilteredScenarioDefinition other = (FilteredScenarioDefinition) obj;
      return JodaBeanUtils.equal(getArguments(), other.getArguments());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(getArguments());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(64);
    buf.append("FilteredScenarioDefinition{");
    buf.append("arguments").append('=').append(JodaBeanUtils.toString(getArguments()));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code FilteredScenarioDefinition}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code arguments} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<ImmutableListMultimap<Class<?>, ScenarioArgument<?, ?>>> _arguments = DirectMetaProperty.ofImmutable(
        this, "arguments", FilteredScenarioDefinition.class, (Class) ImmutableListMultimap.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "arguments");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -2035517098:  // arguments
          return _arguments;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public FilteredScenarioDefinition.Builder builder() {
      return new FilteredScenarioDefinition.Builder();
    }

    @Override
    public Class<? extends FilteredScenarioDefinition> beanType() {
      return FilteredScenarioDefinition.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code arguments} property.
     * @return the meta-property, not null
     */
    public MetaProperty<ImmutableListMultimap<Class<?>, ScenarioArgument<?, ?>>> arguments() {
      return _arguments;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -2035517098:  // arguments
          return ((FilteredScenarioDefinition) bean).getArguments();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code FilteredScenarioDefinition}.
   */
  public static final class Builder extends DirectFieldsBeanBuilder<FilteredScenarioDefinition> {

    private ListMultimap<Class<?>, ScenarioArgument<?, ?>> _arguments = ArrayListMultimap.create();

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(FilteredScenarioDefinition beanToCopy) {
      this._arguments = ArrayListMultimap.create(beanToCopy.getArguments());
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case -2035517098:  // arguments
          return _arguments;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @SuppressWarnings("unchecked")
    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case -2035517098:  // arguments
          this._arguments = (ListMultimap<Class<?>, ScenarioArgument<?, ?>>) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public FilteredScenarioDefinition build() {
      return new FilteredScenarioDefinition(
          _arguments);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the {@code arguments} property in the builder.
     * @param arguments  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder arguments(ListMultimap<Class<?>, ScenarioArgument<?, ?>> arguments) {
      JodaBeanUtils.notNull(arguments, "arguments");
      this._arguments = arguments;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(64);
      buf.append("FilteredScenarioDefinition.Builder{");
      buf.append("arguments").append('=').append(JodaBeanUtils.toString(_arguments));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
