/**
 * Copyright (C) 2014 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.sesame.engine;

import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.util.ArgumentChecker;

/**
 * Represents a single cell in the grid of {@link Results}.
 */
@BeanDefinition
public final class Cell implements ImmutableBean {

  /** Zero-based index of the cell's row. */
  @PropertyDefinition
  private final int _row;

  /** Zero-based index of the cell's column. */
  @PropertyDefinition
  private final int _col;

  /**
   * @param row the index of the cell's row (zero based)
   * @param col the index of the cell's column (zero based)
   */
  public static Cell of(int row, int col) {
    ArgumentChecker.notNegative(row, "row");
    ArgumentChecker.notNegative(col, "col");
    return new Cell(row, col);
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code Cell}.
   * @return the meta-bean, not null
   */
  public static Cell.Meta meta() {
    return Cell.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(Cell.Meta.INSTANCE);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static Cell.Builder builder() {
    return new Cell.Builder();
  }

  private Cell(
      int row,
      int col) {
    this._row = row;
    this._col = col;
  }

  @Override
  public Cell.Meta metaBean() {
    return Cell.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets zero-based index of the cell's row.
   * @return the value of the property
   */
  public int getRow() {
    return _row;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets zero-based index of the cell's column.
   * @return the value of the property
   */
  public int getCol() {
    return _col;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      Cell other = (Cell) obj;
      return (getRow() == other.getRow()) &&
          (getCol() == other.getCol());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(getRow());
    hash = hash * 31 + JodaBeanUtils.hashCode(getCol());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(96);
    buf.append("Cell{");
    buf.append("row").append('=').append(getRow()).append(',').append(' ');
    buf.append("col").append('=').append(JodaBeanUtils.toString(getCol()));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code Cell}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code row} property.
     */
    private final MetaProperty<Integer> _row = DirectMetaProperty.ofImmutable(
        this, "row", Cell.class, Integer.TYPE);
    /**
     * The meta-property for the {@code col} property.
     */
    private final MetaProperty<Integer> _col = DirectMetaProperty.ofImmutable(
        this, "col", Cell.class, Integer.TYPE);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "row",
        "col");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 113114:  // row
          return _row;
        case 98688:  // col
          return _col;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public Cell.Builder builder() {
      return new Cell.Builder();
    }

    @Override
    public Class<? extends Cell> beanType() {
      return Cell.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code row} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Integer> row() {
      return _row;
    }

    /**
     * The meta-property for the {@code col} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Integer> col() {
      return _col;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 113114:  // row
          return ((Cell) bean).getRow();
        case 98688:  // col
          return ((Cell) bean).getCol();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code Cell}.
   */
  public static final class Builder extends DirectFieldsBeanBuilder<Cell> {

    private int _row;
    private int _col;

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(Cell beanToCopy) {
      this._row = beanToCopy.getRow();
      this._col = beanToCopy.getCol();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 113114:  // row
          return _row;
        case 98688:  // col
          return _col;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 113114:  // row
          this._row = (Integer) newValue;
          break;
        case 98688:  // col
          this._col = (Integer) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public Cell build() {
      return new Cell(
          _row,
          _col);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the {@code row} property in the builder.
     * @param row  the new value
     * @return this, for chaining, not null
     */
    public Builder row(int row) {
      this._row = row;
      return this;
    }

    /**
     * Sets the {@code col} property in the builder.
     * @param col  the new value
     * @return this, for chaining, not null
     */
    public Builder col(int col) {
      this._col = col;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(96);
      buf.append("Cell.Builder{");
      buf.append("row").append('=').append(JodaBeanUtils.toString(_row)).append(',').append(' ');
      buf.append("col").append('=').append(JodaBeanUtils.toString(_col));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
