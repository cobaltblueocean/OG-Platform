/**
 * Copyright (C) 2014 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.sesame.engine;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;
import org.threeten.bp.ZonedDateTime;

import com.google.common.collect.HashMultimap;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableMultimap;
import com.google.common.collect.Multimap;
import com.opengamma.id.ExternalIdBundle;
import com.opengamma.id.UniqueIdentifiable;
import com.opengamma.sesame.config.FunctionArguments;
import com.opengamma.sesame.config.ViewConfig;
import com.opengamma.sesame.marketdata.FieldName;
import com.opengamma.sesame.marketdata.HtsRequestKey;
import com.opengamma.sesame.marketdata.MarketDataEnvironment;
import com.opengamma.timeseries.date.localdate.LocalDateDoubleTimeSeries;
import com.opengamma.util.result.Result;
import com.opengamma.util.tuple.Pair;

/**
 * Holds all the inputs that were provided when a view
 * cycle was run.
 */
@BeanDefinition
public final class ViewInputs implements ImmutableBean {

  @PropertyDefinition
  private final ImmutableList<Object> _tradeInputs;

  @PropertyDefinition(validate = "notNull")
  private final ViewConfig _viewConfig;

  /** @deprecated use {@link #_functionArgs} */
  @Deprecated
  @PropertyDefinition(validate = "notNull")
  private final FunctionArguments _functionArguments;

  /** Arguments passed to the top level functions, keyed by the function type. */
  @PropertyDefinition(validate = "notNull")
  private final ImmutableMap<Class<?>, FunctionArguments> _functionArgs;

  @PropertyDefinition(validate = "notNull")
  private final ZonedDateTime _valuationTime;

  /**
   * The market data used in the calculations.
   * @deprecated use {@link #_marketDataEnvironment}
   */
  @Deprecated
  @PropertyDefinition(validate = "notNull")
  private final ImmutableMap<ZonedDateTime, Map<Pair<ExternalIdBundle, FieldName>, Result<?>>> _marketData;

  @PropertyDefinition(validate = "notNull")
  private final ImmutableMultimap<Class<?>, UniqueIdentifiable> _configData;

  @PropertyDefinition
  private final ImmutableMultimap<HtsRequestKey, LocalDateDoubleTimeSeries> _htsData;

  @PropertyDefinition
  private final MarketDataEnvironment _marketDataEnvironment;

  /**
   * Create the view inputs associated with a cycle.
   *
   * @param tradeInputs the  trades/securities used for the cycle
   * @param viewConfig  the view config used for the cycle
   * @param functionArgs  the function arguments use for the cycle
   * @param valuationTime  the valuation time for the cycle
   * @param marketData  all the market data used for the cycle
   * @param configData  all the other data (config, conventions etc)
   * @param htsData  the historical timeseries data used for the cycle
   * @param marketDataEnvironment  the market data used for the cycle
   */
  @SuppressWarnings("unchecked")
  public ViewInputs(List<?> tradeInputs,
                    ViewConfig viewConfig,
                    Map<Class<?>, FunctionArguments> functionArgs,
                    ZonedDateTime valuationTime,
                    Map<ZonedDateTime, Map<Pair<ExternalIdBundle, FieldName>, Result<?>>> marketData,
                    Multimap<Class<?>, UniqueIdentifiable> configData,
                    Multimap<HtsRequestKey, LocalDateDoubleTimeSeries> htsData,
                    MarketDataEnvironment marketDataEnvironment) {

    this((List<Object>) tradeInputs, viewConfig, FunctionArguments.EMPTY, functionArgs,
         valuationTime, marketData, configData, htsData, marketDataEnvironment);
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code ViewInputs}.
   * @return the meta-bean, not null
   */
  public static ViewInputs.Meta meta() {
    return ViewInputs.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(ViewInputs.Meta.INSTANCE);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static ViewInputs.Builder builder() {
    return new ViewInputs.Builder();
  }

  private ViewInputs(
      List<Object> tradeInputs,
      ViewConfig viewConfig,
      FunctionArguments functionArguments,
      Map<Class<?>, FunctionArguments> functionArgs,
      ZonedDateTime valuationTime,
      Map<ZonedDateTime, Map<Pair<ExternalIdBundle, FieldName>, Result<?>>> marketData,
      Multimap<Class<?>, UniqueIdentifiable> configData,
      Multimap<HtsRequestKey, LocalDateDoubleTimeSeries> htsData,
      MarketDataEnvironment marketDataEnvironment) {
    JodaBeanUtils.notNull(viewConfig, "viewConfig");
    JodaBeanUtils.notNull(functionArguments, "functionArguments");
    JodaBeanUtils.notNull(functionArgs, "functionArgs");
    JodaBeanUtils.notNull(valuationTime, "valuationTime");
    JodaBeanUtils.notNull(marketData, "marketData");
    JodaBeanUtils.notNull(configData, "configData");
    this._tradeInputs = (tradeInputs != null ? ImmutableList.copyOf(tradeInputs) : null);
    this._viewConfig = viewConfig;
    this._functionArguments = functionArguments;
    this._functionArgs = ImmutableMap.copyOf(functionArgs);
    this._valuationTime = valuationTime;
    this._marketData = ImmutableMap.copyOf(marketData);
    this._configData = ImmutableMultimap.copyOf(configData);
    this._htsData = (htsData != null ? ImmutableMultimap.copyOf(htsData) : null);
    this._marketDataEnvironment = marketDataEnvironment;
  }

  @Override
  public ViewInputs.Meta metaBean() {
    return ViewInputs.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the tradeInputs.
   * @return the value of the property
   */
  public ImmutableList<Object> getTradeInputs() {
    return _tradeInputs;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the viewConfig.
   * @return the value of the property, not null
   */
  public ViewConfig getViewConfig() {
    return _viewConfig;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets @deprecated use {@link #_functionArgs}
   * @return the value of the property, not null
   */
  @Deprecated
  public FunctionArguments getFunctionArguments() {
    return _functionArguments;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets arguments passed to the top level functions, keyed by the function type.
   * @return the value of the property, not null
   */
  public ImmutableMap<Class<?>, FunctionArguments> getFunctionArgs() {
    return _functionArgs;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the valuationTime.
   * @return the value of the property, not null
   */
  public ZonedDateTime getValuationTime() {
    return _valuationTime;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the market data used in the calculations.
   * @deprecated use {@link #_marketDataEnvironment}
   * @return the value of the property, not null
   */
  @Deprecated
  public ImmutableMap<ZonedDateTime, Map<Pair<ExternalIdBundle, FieldName>, Result<?>>> getMarketData() {
    return _marketData;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the configData.
   * @return the value of the property, not null
   */
  public ImmutableMultimap<Class<?>, UniqueIdentifiable> getConfigData() {
    return _configData;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the htsData.
   * @return the value of the property
   */
  public ImmutableMultimap<HtsRequestKey, LocalDateDoubleTimeSeries> getHtsData() {
    return _htsData;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the marketDataEnvironment.
   * @return the value of the property
   */
  public MarketDataEnvironment getMarketDataEnvironment() {
    return _marketDataEnvironment;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      ViewInputs other = (ViewInputs) obj;
      return JodaBeanUtils.equal(getTradeInputs(), other.getTradeInputs()) &&
          JodaBeanUtils.equal(getViewConfig(), other.getViewConfig()) &&
          JodaBeanUtils.equal(getFunctionArguments(), other.getFunctionArguments()) &&
          JodaBeanUtils.equal(getFunctionArgs(), other.getFunctionArgs()) &&
          JodaBeanUtils.equal(getValuationTime(), other.getValuationTime()) &&
          JodaBeanUtils.equal(getMarketData(), other.getMarketData()) &&
          JodaBeanUtils.equal(getConfigData(), other.getConfigData()) &&
          JodaBeanUtils.equal(getHtsData(), other.getHtsData()) &&
          JodaBeanUtils.equal(getMarketDataEnvironment(), other.getMarketDataEnvironment());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(getTradeInputs());
    hash = hash * 31 + JodaBeanUtils.hashCode(getViewConfig());
    hash = hash * 31 + JodaBeanUtils.hashCode(getFunctionArguments());
    hash = hash * 31 + JodaBeanUtils.hashCode(getFunctionArgs());
    hash = hash * 31 + JodaBeanUtils.hashCode(getValuationTime());
    hash = hash * 31 + JodaBeanUtils.hashCode(getMarketData());
    hash = hash * 31 + JodaBeanUtils.hashCode(getConfigData());
    hash = hash * 31 + JodaBeanUtils.hashCode(getHtsData());
    hash = hash * 31 + JodaBeanUtils.hashCode(getMarketDataEnvironment());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(320);
    buf.append("ViewInputs{");
    buf.append("tradeInputs").append('=').append(getTradeInputs()).append(',').append(' ');
    buf.append("viewConfig").append('=').append(getViewConfig()).append(',').append(' ');
    buf.append("functionArguments").append('=').append(getFunctionArguments()).append(',').append(' ');
    buf.append("functionArgs").append('=').append(getFunctionArgs()).append(',').append(' ');
    buf.append("valuationTime").append('=').append(getValuationTime()).append(',').append(' ');
    buf.append("marketData").append('=').append(getMarketData()).append(',').append(' ');
    buf.append("configData").append('=').append(getConfigData()).append(',').append(' ');
    buf.append("htsData").append('=').append(getHtsData()).append(',').append(' ');
    buf.append("marketDataEnvironment").append('=').append(JodaBeanUtils.toString(getMarketDataEnvironment()));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code ViewInputs}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code tradeInputs} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<ImmutableList<Object>> _tradeInputs = DirectMetaProperty.ofImmutable(
        this, "tradeInputs", ViewInputs.class, (Class) ImmutableList.class);
    /**
     * The meta-property for the {@code viewConfig} property.
     */
    private final MetaProperty<ViewConfig> _viewConfig = DirectMetaProperty.ofImmutable(
        this, "viewConfig", ViewInputs.class, ViewConfig.class);
    /**
     * The meta-property for the {@code functionArguments} property.
     */
    private final MetaProperty<FunctionArguments> _functionArguments = DirectMetaProperty.ofImmutable(
        this, "functionArguments", ViewInputs.class, FunctionArguments.class);
    /**
     * The meta-property for the {@code functionArgs} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<ImmutableMap<Class<?>, FunctionArguments>> _functionArgs = DirectMetaProperty.ofImmutable(
        this, "functionArgs", ViewInputs.class, (Class) ImmutableMap.class);
    /**
     * The meta-property for the {@code valuationTime} property.
     */
    private final MetaProperty<ZonedDateTime> _valuationTime = DirectMetaProperty.ofImmutable(
        this, "valuationTime", ViewInputs.class, ZonedDateTime.class);
    /**
     * The meta-property for the {@code marketData} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<ImmutableMap<ZonedDateTime, Map<Pair<ExternalIdBundle, FieldName>, Result<?>>>> _marketData = DirectMetaProperty.ofImmutable(
        this, "marketData", ViewInputs.class, (Class) ImmutableMap.class);
    /**
     * The meta-property for the {@code configData} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<ImmutableMultimap<Class<?>, UniqueIdentifiable>> _configData = DirectMetaProperty.ofImmutable(
        this, "configData", ViewInputs.class, (Class) ImmutableMultimap.class);
    /**
     * The meta-property for the {@code htsData} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<ImmutableMultimap<HtsRequestKey, LocalDateDoubleTimeSeries>> _htsData = DirectMetaProperty.ofImmutable(
        this, "htsData", ViewInputs.class, (Class) ImmutableMultimap.class);
    /**
     * The meta-property for the {@code marketDataEnvironment} property.
     */
    private final MetaProperty<MarketDataEnvironment> _marketDataEnvironment = DirectMetaProperty.ofImmutable(
        this, "marketDataEnvironment", ViewInputs.class, MarketDataEnvironment.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "tradeInputs",
        "viewConfig",
        "functionArguments",
        "functionArgs",
        "valuationTime",
        "marketData",
        "configData",
        "htsData",
        "marketDataEnvironment");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 1675813997:  // tradeInputs
          return _tradeInputs;
        case 1970035271:  // viewConfig
          return _viewConfig;
        case -260573090:  // functionArguments
          return _functionArguments;
        case -211743531:  // functionArgs
          return _functionArgs;
        case 113591406:  // valuationTime
          return _valuationTime;
        case 1116764678:  // marketData
          return _marketData;
        case 831026700:  // configData
          return _configData;
        case 1240411441:  // htsData
          return _htsData;
        case -1196163027:  // marketDataEnvironment
          return _marketDataEnvironment;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public ViewInputs.Builder builder() {
      return new ViewInputs.Builder();
    }

    @Override
    public Class<? extends ViewInputs> beanType() {
      return ViewInputs.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code tradeInputs} property.
     * @return the meta-property, not null
     */
    public MetaProperty<ImmutableList<Object>> tradeInputs() {
      return _tradeInputs;
    }

    /**
     * The meta-property for the {@code viewConfig} property.
     * @return the meta-property, not null
     */
    public MetaProperty<ViewConfig> viewConfig() {
      return _viewConfig;
    }

    /**
     * The meta-property for the {@code functionArguments} property.
     * @return the meta-property, not null
     */
    @Deprecated
    public MetaProperty<FunctionArguments> functionArguments() {
      return _functionArguments;
    }

    /**
     * The meta-property for the {@code functionArgs} property.
     * @return the meta-property, not null
     */
    public MetaProperty<ImmutableMap<Class<?>, FunctionArguments>> functionArgs() {
      return _functionArgs;
    }

    /**
     * The meta-property for the {@code valuationTime} property.
     * @return the meta-property, not null
     */
    public MetaProperty<ZonedDateTime> valuationTime() {
      return _valuationTime;
    }

    /**
     * The meta-property for the {@code marketData} property.
     * @deprecated use {@link #_marketDataEnvironment}
     * @return the meta-property, not null
     */
    @Deprecated
    public MetaProperty<ImmutableMap<ZonedDateTime, Map<Pair<ExternalIdBundle, FieldName>, Result<?>>>> marketData() {
      return _marketData;
    }

    /**
     * The meta-property for the {@code configData} property.
     * @return the meta-property, not null
     */
    public MetaProperty<ImmutableMultimap<Class<?>, UniqueIdentifiable>> configData() {
      return _configData;
    }

    /**
     * The meta-property for the {@code htsData} property.
     * @return the meta-property, not null
     */
    public MetaProperty<ImmutableMultimap<HtsRequestKey, LocalDateDoubleTimeSeries>> htsData() {
      return _htsData;
    }

    /**
     * The meta-property for the {@code marketDataEnvironment} property.
     * @return the meta-property, not null
     */
    public MetaProperty<MarketDataEnvironment> marketDataEnvironment() {
      return _marketDataEnvironment;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 1675813997:  // tradeInputs
          return ((ViewInputs) bean).getTradeInputs();
        case 1970035271:  // viewConfig
          return ((ViewInputs) bean).getViewConfig();
        case -260573090:  // functionArguments
          return ((ViewInputs) bean).getFunctionArguments();
        case -211743531:  // functionArgs
          return ((ViewInputs) bean).getFunctionArgs();
        case 113591406:  // valuationTime
          return ((ViewInputs) bean).getValuationTime();
        case 1116764678:  // marketData
          return ((ViewInputs) bean).getMarketData();
        case 831026700:  // configData
          return ((ViewInputs) bean).getConfigData();
        case 1240411441:  // htsData
          return ((ViewInputs) bean).getHtsData();
        case -1196163027:  // marketDataEnvironment
          return ((ViewInputs) bean).getMarketDataEnvironment();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code ViewInputs}.
   */
  public static final class Builder extends DirectFieldsBeanBuilder<ViewInputs> {

    private List<Object> _tradeInputs;
    private ViewConfig _viewConfig;
    private FunctionArguments _functionArguments;
    private Map<Class<?>, FunctionArguments> _functionArgs = new HashMap<Class<?>, FunctionArguments>();
    private ZonedDateTime _valuationTime;
    private Map<ZonedDateTime, Map<Pair<ExternalIdBundle, FieldName>, Result<?>>> _marketData = new HashMap<ZonedDateTime, Map<Pair<ExternalIdBundle, FieldName>, Result<?>>>();
    private Multimap<Class<?>, UniqueIdentifiable> _configData = HashMultimap.create();
    private Multimap<HtsRequestKey, LocalDateDoubleTimeSeries> _htsData;
    private MarketDataEnvironment _marketDataEnvironment;

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(ViewInputs beanToCopy) {
      this._tradeInputs = (beanToCopy.getTradeInputs() != null ? new ArrayList<Object>(beanToCopy.getTradeInputs()) : null);
      this._viewConfig = beanToCopy.getViewConfig();
      this._functionArguments = beanToCopy.getFunctionArguments();
      this._functionArgs = new HashMap<Class<?>, FunctionArguments>(beanToCopy.getFunctionArgs());
      this._valuationTime = beanToCopy.getValuationTime();
      this._marketData = new HashMap<ZonedDateTime, Map<Pair<ExternalIdBundle, FieldName>, Result<?>>>(beanToCopy.getMarketData());
      this._configData = HashMultimap.create(beanToCopy.getConfigData());
      this._htsData = (beanToCopy.getHtsData() != null ? HashMultimap.create(beanToCopy.getHtsData()) : null);
      this._marketDataEnvironment = beanToCopy.getMarketDataEnvironment();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 1675813997:  // tradeInputs
          return _tradeInputs;
        case 1970035271:  // viewConfig
          return _viewConfig;
        case -260573090:  // functionArguments
          return _functionArguments;
        case -211743531:  // functionArgs
          return _functionArgs;
        case 113591406:  // valuationTime
          return _valuationTime;
        case 1116764678:  // marketData
          return _marketData;
        case 831026700:  // configData
          return _configData;
        case 1240411441:  // htsData
          return _htsData;
        case -1196163027:  // marketDataEnvironment
          return _marketDataEnvironment;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @SuppressWarnings("unchecked")
    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 1675813997:  // tradeInputs
          this._tradeInputs = (List<Object>) newValue;
          break;
        case 1970035271:  // viewConfig
          this._viewConfig = (ViewConfig) newValue;
          break;
        case -260573090:  // functionArguments
          this._functionArguments = (FunctionArguments) newValue;
          break;
        case -211743531:  // functionArgs
          this._functionArgs = (Map<Class<?>, FunctionArguments>) newValue;
          break;
        case 113591406:  // valuationTime
          this._valuationTime = (ZonedDateTime) newValue;
          break;
        case 1116764678:  // marketData
          this._marketData = (Map<ZonedDateTime, Map<Pair<ExternalIdBundle, FieldName>, Result<?>>>) newValue;
          break;
        case 831026700:  // configData
          this._configData = (Multimap<Class<?>, UniqueIdentifiable>) newValue;
          break;
        case 1240411441:  // htsData
          this._htsData = (Multimap<HtsRequestKey, LocalDateDoubleTimeSeries>) newValue;
          break;
        case -1196163027:  // marketDataEnvironment
          this._marketDataEnvironment = (MarketDataEnvironment) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public ViewInputs build() {
      return new ViewInputs(
          _tradeInputs,
          _viewConfig,
          _functionArguments,
          _functionArgs,
          _valuationTime,
          _marketData,
          _configData,
          _htsData,
          _marketDataEnvironment);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the {@code tradeInputs} property in the builder.
     * @param tradeInputs  the new value
     * @return this, for chaining, not null
     */
    public Builder tradeInputs(List<Object> tradeInputs) {
      this._tradeInputs = tradeInputs;
      return this;
    }

    /**
     * Sets the {@code tradeInputs} property in the builder
     * from an array of objects.
     * @param tradeInputs  the new value
     * @return this, for chaining, not null
     */
    public Builder tradeInputs(Object... tradeInputs) {
      return tradeInputs(Arrays.asList(tradeInputs));
    }

    /**
     * Sets the {@code viewConfig} property in the builder.
     * @param viewConfig  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder viewConfig(ViewConfig viewConfig) {
      JodaBeanUtils.notNull(viewConfig, "viewConfig");
      this._viewConfig = viewConfig;
      return this;
    }

    /**
     * Sets the {@code functionArguments} property in the builder.
     * @param functionArguments  the new value, not null
     * @return this, for chaining, not null
     */
    @Deprecated
    public Builder functionArguments(FunctionArguments functionArguments) {
      JodaBeanUtils.notNull(functionArguments, "functionArguments");
      this._functionArguments = functionArguments;
      return this;
    }

    /**
     * Sets the {@code functionArgs} property in the builder.
     * @param functionArgs  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder functionArgs(Map<Class<?>, FunctionArguments> functionArgs) {
      JodaBeanUtils.notNull(functionArgs, "functionArgs");
      this._functionArgs = functionArgs;
      return this;
    }

    /**
     * Sets the {@code valuationTime} property in the builder.
     * @param valuationTime  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder valuationTime(ZonedDateTime valuationTime) {
      JodaBeanUtils.notNull(valuationTime, "valuationTime");
      this._valuationTime = valuationTime;
      return this;
    }

    /**
     * Sets the {@code marketData} property in the builder.
     * @param marketData  the new value, not null
     * @return this, for chaining, not null
     * @deprecated use {@link #_marketDataEnvironment}
     */
    @Deprecated
    public Builder marketData(Map<ZonedDateTime, Map<Pair<ExternalIdBundle, FieldName>, Result<?>>> marketData) {
      JodaBeanUtils.notNull(marketData, "marketData");
      this._marketData = marketData;
      return this;
    }

    /**
     * Sets the {@code configData} property in the builder.
     * @param configData  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder configData(Multimap<Class<?>, UniqueIdentifiable> configData) {
      JodaBeanUtils.notNull(configData, "configData");
      this._configData = configData;
      return this;
    }

    /**
     * Sets the {@code htsData} property in the builder.
     * @param htsData  the new value
     * @return this, for chaining, not null
     */
    public Builder htsData(Multimap<HtsRequestKey, LocalDateDoubleTimeSeries> htsData) {
      this._htsData = htsData;
      return this;
    }

    /**
     * Sets the {@code marketDataEnvironment} property in the builder.
     * @param marketDataEnvironment  the new value
     * @return this, for chaining, not null
     */
    public Builder marketDataEnvironment(MarketDataEnvironment marketDataEnvironment) {
      this._marketDataEnvironment = marketDataEnvironment;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(320);
      buf.append("ViewInputs.Builder{");
      buf.append("tradeInputs").append('=').append(JodaBeanUtils.toString(_tradeInputs)).append(',').append(' ');
      buf.append("viewConfig").append('=').append(JodaBeanUtils.toString(_viewConfig)).append(',').append(' ');
      buf.append("functionArguments").append('=').append(JodaBeanUtils.toString(_functionArguments)).append(',').append(' ');
      buf.append("functionArgs").append('=').append(JodaBeanUtils.toString(_functionArgs)).append(',').append(' ');
      buf.append("valuationTime").append('=').append(JodaBeanUtils.toString(_valuationTime)).append(',').append(' ');
      buf.append("marketData").append('=').append(JodaBeanUtils.toString(_marketData)).append(',').append(' ');
      buf.append("configData").append('=').append(JodaBeanUtils.toString(_configData)).append(',').append(' ');
      buf.append("htsData").append('=').append(JodaBeanUtils.toString(_htsData)).append(',').append(' ');
      buf.append("marketDataEnvironment").append('=').append(JodaBeanUtils.toString(_marketDataEnvironment));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
