/**
 * Copyright (C) 2015 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.sesame.marketdata.scenarios;

import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.ImmutableConstructor;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.google.common.collect.ImmutableSet;
import com.opengamma.financial.currency.CurrencyPair;
import com.opengamma.sesame.marketdata.FxRateId;
import com.opengamma.sesame.marketdata.MarketDataId;
import com.opengamma.util.ArgumentChecker;
import com.opengamma.util.money.Currency;

/**
 * Market data filter that matches a currency pair or its inverse.
 * <p>
 * The {@code apply} methods return an instance of {@link CurrencyPairMatchDetails} which contains a flag
 * indicating whether the pair or its inverse was matched.
 */
@BeanDefinition
public final class CurrencyPairFilter implements MarketDataFilter, ImmutableBean {

  /** The currency pair matched by this filter. The inverse pair will also be matched. */
  @PropertyDefinition(validate = "notNull")
  private final CurrencyPair _currencyPair;

  /**
   * @param currencyPair the currency pair matched by this filter. The inverse pair will also be matched
   */
  @ImmutableConstructor
  public CurrencyPairFilter(CurrencyPair currencyPair) {
    _currencyPair = ArgumentChecker.notNull(currencyPair, "currencyPair");
  }

  /**
   * @param base the base currency of the pair matched by this filter. The inverse pair will also be matched
   * @param counter the counter currency of the pair matched by this filter. The inverse pair will also be matched
   */
  public CurrencyPairFilter(Currency base, Currency counter) {
    this(CurrencyPair.of(base, counter));
  }

  @Override
  public Set<? extends MatchDetails> apply(MarketDataId<?> marketDataId) {
    FxRateId rateId = (FxRateId) marketDataId;
    CurrencyPair currencyPair = rateId.getCurrencyPair();

    if (_currencyPair.equals(currencyPair)) {
      return ImmutableSet.of(new CurrencyPairMatchDetails(false));
    } else if (_currencyPair.equals(currencyPair.inverse())) {
      return ImmutableSet.of(new CurrencyPairMatchDetails(true));
    } else {
      return ImmutableSet.of();
    }
  }

  @Override
  public Set<? extends MatchDetails> apply(MarketDataId<?> marketDataId, Object marketData) {
    return apply(marketDataId);
  }

  @Override
  public Class<?> getMarketDataType() {
    return Double.class;
  }

  @Override
  public Class<? extends MarketDataId<?>> getMarketDataIdType() {
    return FxRateId.class;
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code CurrencyPairFilter}.
   * @return the meta-bean, not null
   */
  public static CurrencyPairFilter.Meta meta() {
    return CurrencyPairFilter.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(CurrencyPairFilter.Meta.INSTANCE);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static CurrencyPairFilter.Builder builder() {
    return new CurrencyPairFilter.Builder();
  }

  @Override
  public CurrencyPairFilter.Meta metaBean() {
    return CurrencyPairFilter.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the currency pair matched by this filter. The inverse pair will also be matched.
   * @return the value of the property, not null
   */
  public CurrencyPair getCurrencyPair() {
    return _currencyPair;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      CurrencyPairFilter other = (CurrencyPairFilter) obj;
      return JodaBeanUtils.equal(getCurrencyPair(), other.getCurrencyPair());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(getCurrencyPair());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(64);
    buf.append("CurrencyPairFilter{");
    buf.append("currencyPair").append('=').append(JodaBeanUtils.toString(getCurrencyPair()));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code CurrencyPairFilter}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code currencyPair} property.
     */
    private final MetaProperty<CurrencyPair> _currencyPair = DirectMetaProperty.ofImmutable(
        this, "currencyPair", CurrencyPairFilter.class, CurrencyPair.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "currencyPair");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 1005147787:  // currencyPair
          return _currencyPair;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public CurrencyPairFilter.Builder builder() {
      return new CurrencyPairFilter.Builder();
    }

    @Override
    public Class<? extends CurrencyPairFilter> beanType() {
      return CurrencyPairFilter.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code currencyPair} property.
     * @return the meta-property, not null
     */
    public MetaProperty<CurrencyPair> currencyPair() {
      return _currencyPair;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 1005147787:  // currencyPair
          return ((CurrencyPairFilter) bean).getCurrencyPair();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code CurrencyPairFilter}.
   */
  public static final class Builder extends DirectFieldsBeanBuilder<CurrencyPairFilter> {

    private CurrencyPair _currencyPair;

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(CurrencyPairFilter beanToCopy) {
      this._currencyPair = beanToCopy.getCurrencyPair();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 1005147787:  // currencyPair
          return _currencyPair;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 1005147787:  // currencyPair
          this._currencyPair = (CurrencyPair) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public CurrencyPairFilter build() {
      return new CurrencyPairFilter(
          _currencyPair);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the {@code currencyPair} property in the builder.
     * @param currencyPair  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder currencyPair(CurrencyPair currencyPair) {
      JodaBeanUtils.notNull(currencyPair, "currencyPair");
      this._currencyPair = currencyPair;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(64);
      buf.append("CurrencyPairFilter.Builder{");
      buf.append("currencyPair").append('=').append(JodaBeanUtils.toString(_currencyPair));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
