/**
 * Copyright (C) 2015 - present by OpenGamma Inc. and the OpenGamma group of companies
 * <p/>
 * Please see distribution for license.
 */
package com.opengamma.sesame.marketdata.scenarios;

import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.google.common.collect.ImmutableSet;
import com.opengamma.analytics.financial.model.volatility.surface.VolatilitySurface;
import com.opengamma.sesame.marketdata.MarketDataId;
import com.opengamma.sesame.marketdata.VolatilitySurfaceId;

/**
 * Market data filter that matches a volatility surface by name.
 */
@BeanDefinition
public final class VolatilitySurfaceNameFilter implements MarketDataFilter, ImmutableBean {

  /** The name of the volatility surface. */
  @PropertyDefinition(validate = "notEmpty")
  private final String _name;

  @Override
  public Set<? extends MatchDetails> apply(MarketDataId<?> marketDataId) {
    VolatilitySurfaceId surfaceId = (VolatilitySurfaceId) marketDataId;
    return _name.equals(surfaceId.getName()) ? StandardMatchDetails.MATCHES : ImmutableSet.<MatchDetails>of();
  }

  @Override
  public Set<? extends MatchDetails> apply(MarketDataId<?> marketDataId, Object marketData) {
    return apply(marketDataId);
  }

  @Override
  public Class<?> getMarketDataType() {
    return VolatilitySurface.class;
  }

  @Override
  public Class<? extends MarketDataId<?>> getMarketDataIdType() {
    return VolatilitySurfaceId.class;
  }

  /**
   * Returns a filter that will match a surface with the specified name
   *
   * @param name  the name of the surface matched by the filter, not empty
   * @return a filter that will match the specified name
   */
  public static VolatilitySurfaceNameFilter of(String name) {
    return VolatilitySurfaceNameFilter.builder().name(name).build();
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code VolatilitySurfaceNameFilter}.
   * @return the meta-bean, not null
   */
  public static VolatilitySurfaceNameFilter.Meta meta() {
    return VolatilitySurfaceNameFilter.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(VolatilitySurfaceNameFilter.Meta.INSTANCE);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static VolatilitySurfaceNameFilter.Builder builder() {
    return new VolatilitySurfaceNameFilter.Builder();
  }

  private VolatilitySurfaceNameFilter(
      String name) {
    JodaBeanUtils.notEmpty(name, "name");
    this._name = name;
  }

  @Override
  public VolatilitySurfaceNameFilter.Meta metaBean() {
    return VolatilitySurfaceNameFilter.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the name of the volatility surface.
   * @return the value of the property, not empty
   */
  public String getName() {
    return _name;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      VolatilitySurfaceNameFilter other = (VolatilitySurfaceNameFilter) obj;
      return JodaBeanUtils.equal(getName(), other.getName());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(getName());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(64);
    buf.append("VolatilitySurfaceNameFilter{");
    buf.append("name").append('=').append(JodaBeanUtils.toString(getName()));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code VolatilitySurfaceNameFilter}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code name} property.
     */
    private final MetaProperty<String> _name = DirectMetaProperty.ofImmutable(
        this, "name", VolatilitySurfaceNameFilter.class, String.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "name");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 3373707:  // name
          return _name;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public VolatilitySurfaceNameFilter.Builder builder() {
      return new VolatilitySurfaceNameFilter.Builder();
    }

    @Override
    public Class<? extends VolatilitySurfaceNameFilter> beanType() {
      return VolatilitySurfaceNameFilter.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code name} property.
     * @return the meta-property, not null
     */
    public MetaProperty<String> name() {
      return _name;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 3373707:  // name
          return ((VolatilitySurfaceNameFilter) bean).getName();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code VolatilitySurfaceNameFilter}.
   */
  public static final class Builder extends DirectFieldsBeanBuilder<VolatilitySurfaceNameFilter> {

    private String _name;

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(VolatilitySurfaceNameFilter beanToCopy) {
      this._name = beanToCopy.getName();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 3373707:  // name
          return _name;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 3373707:  // name
          this._name = (String) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public VolatilitySurfaceNameFilter build() {
      return new VolatilitySurfaceNameFilter(
          _name);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the {@code name} property in the builder.
     * @param name  the new value, not empty
     * @return this, for chaining, not null
     */
    public Builder name(String name) {
      JodaBeanUtils.notEmpty(name, "name");
      this._name = name;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(64);
      buf.append("VolatilitySurfaceNameFilter.Builder{");
      buf.append("name").append('=').append(JodaBeanUtils.toString(_name));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
