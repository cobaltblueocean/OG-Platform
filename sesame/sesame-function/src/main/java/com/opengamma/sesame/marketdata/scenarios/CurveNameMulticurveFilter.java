/**
 * Copyright (C) 2015 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.sesame.marketdata.scenarios;

import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.ImmutableConstructor;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.google.common.collect.ImmutableSet;
import com.opengamma.sesame.MulticurveBundle;
import com.opengamma.sesame.marketdata.MarketDataId;
import com.opengamma.sesame.marketdata.MulticurveId;
import com.opengamma.util.ArgumentChecker;

/**
 * Filter that matches individual curves in a {@link MulticurveBundle} based on the curve's name.
 */
@BeanDefinition
public final class CurveNameMulticurveFilter implements MarketDataFilter, ImmutableBean {

  /** The curve name matched by this filter. */
  @PropertyDefinition(validate = "notNull")
  private final String _curveName;

  /**
   * @param curveName the curve name matched by this filter
   */
  @ImmutableConstructor
  public CurveNameMulticurveFilter(String curveName) {
    _curveName = ArgumentChecker.notEmpty(curveName, "curveName");
  }

  @Override
  public Set<MulticurveMatchDetails> apply(MarketDataId<?> marketDataId) {
    MulticurveId id = (MulticurveId) marketDataId;
    MulticurveMetadata metadata = MulticurveMetadata.forConfiguration(id.resolveConfig());
    return apply(metadata);
  }

  @Override
  public Set<MulticurveMatchDetails> apply(MarketDataId<?> marketDataId, Object marketData) {
    MulticurveBundle multicurve = (MulticurveBundle) marketData;
    MulticurveMetadata metadata = MulticurveMetadata.forMulticurve(multicurve);
    return apply(metadata);
  }

  private Set<MulticurveMatchDetails> apply(MulticurveMetadata metadata) {
    if (metadata.getCurveNames().contains(_curveName)) {
      return ImmutableSet.of(StandardMatchDetails.multicurve(_curveName));
    } else {
      return ImmutableSet.of();
    }
  }

  @Override
  public Class<?> getMarketDataType() {
    return MulticurveBundle.class;
  }

  @Override
  public Class<MulticurveId> getMarketDataIdType() {
    return MulticurveId.class;
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code CurveNameMulticurveFilter}.
   * @return the meta-bean, not null
   */
  public static CurveNameMulticurveFilter.Meta meta() {
    return CurveNameMulticurveFilter.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(CurveNameMulticurveFilter.Meta.INSTANCE);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static CurveNameMulticurveFilter.Builder builder() {
    return new CurveNameMulticurveFilter.Builder();
  }

  @Override
  public CurveNameMulticurveFilter.Meta metaBean() {
    return CurveNameMulticurveFilter.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the curve name matched by this filter.
   * @return the value of the property, not null
   */
  public String getCurveName() {
    return _curveName;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      CurveNameMulticurveFilter other = (CurveNameMulticurveFilter) obj;
      return JodaBeanUtils.equal(getCurveName(), other.getCurveName());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(getCurveName());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(64);
    buf.append("CurveNameMulticurveFilter{");
    buf.append("curveName").append('=').append(JodaBeanUtils.toString(getCurveName()));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code CurveNameMulticurveFilter}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code curveName} property.
     */
    private final MetaProperty<String> _curveName = DirectMetaProperty.ofImmutable(
        this, "curveName", CurveNameMulticurveFilter.class, String.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "curveName");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 771153946:  // curveName
          return _curveName;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public CurveNameMulticurveFilter.Builder builder() {
      return new CurveNameMulticurveFilter.Builder();
    }

    @Override
    public Class<? extends CurveNameMulticurveFilter> beanType() {
      return CurveNameMulticurveFilter.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code curveName} property.
     * @return the meta-property, not null
     */
    public MetaProperty<String> curveName() {
      return _curveName;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 771153946:  // curveName
          return ((CurveNameMulticurveFilter) bean).getCurveName();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code CurveNameMulticurveFilter}.
   */
  public static final class Builder extends DirectFieldsBeanBuilder<CurveNameMulticurveFilter> {

    private String _curveName;

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(CurveNameMulticurveFilter beanToCopy) {
      this._curveName = beanToCopy.getCurveName();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 771153946:  // curveName
          return _curveName;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 771153946:  // curveName
          this._curveName = (String) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public CurveNameMulticurveFilter build() {
      return new CurveNameMulticurveFilter(
          _curveName);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the {@code curveName} property in the builder.
     * @param curveName  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder curveName(String curveName) {
      JodaBeanUtils.notNull(curveName, "curveName");
      this._curveName = curveName;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(64);
      buf.append("CurveNameMulticurveFilter.Builder{");
      buf.append("curveName").append('=').append(JodaBeanUtils.toString(_curveName));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
