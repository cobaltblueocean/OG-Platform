/**
 * Copyright (C) 2015 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.sesame.marketdata.scenarios;

import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.analytics.ShiftType;
import com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve;
import com.opengamma.analytics.financial.model.interestrate.curve.YieldCurveUtils;
import com.opengamma.analytics.financial.provider.curve.CurveBuildingBlockBundle;
import com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderDiscount;
import com.opengamma.sesame.MulticurveBundle;
import com.opengamma.sesame.marketdata.MarketDataUtils;

/**
 * Applies a parallel shift to a calibrated curve.
 * <p>
 * Shifts can be {@link #absolute} or {@link #relative}. An absolute shift adds the same amount to the value
 * at every curve node. A relative shift multiplies the value at each curve node by the same factor.
 */
@BeanDefinition
public final class MulticurveOutputParallelShift implements Perturbation, ImmutableBean {

  @PropertyDefinition(validate = "notNull", get = "private")
  private final ShiftType _shiftType;

  @PropertyDefinition(get = "private")
  private final double _shiftAmount;

  /**
   * Creates a shift that adds a fixed amount to the value at every node in the curve.
   *
   * @param shiftAmount the amount to add to each node value in the curve
   * @return a shift that adds a fixed amount to the value at every node in the curve
   */
  public static MulticurveOutputParallelShift absolute(double shiftAmount) {
    return new MulticurveOutputParallelShift(ShiftType.ABSOLUTE, shiftAmount);
  }

  /**
   * Creates a shift that multiplies the values at each curve node by a fixed factor.
   *
   * @param shiftAmount the factor to multiply the value at each curve node by
   * @return a shift that multiplies the values at each curve node by a fixed factor
   */
  public static MulticurveOutputParallelShift relative(double shiftAmount) {
    return new MulticurveOutputParallelShift(ShiftType.RELATIVE, shiftAmount);
  }

  /**
   * Applies the shift to the curve.
   *
   * @param marketData a piece of market data with type {@link MulticurveBundle}
   * @param matchDetails details of the match which the {@link MarketDataFilter} was applied to the market data
   * @return the shifted curve
   */
  @Override
  public MulticurveBundle apply(Object marketData, MatchDetails matchDetails) {
    MulticurveBundle bundle = ((MulticurveBundle) marketData);
    String curveName = ((MulticurveMatchDetails) matchDetails).getCurveName();
    // This is safe ATM, all curves are YieldCurves. this will need to be updated when that changes.
    // As part of that an equivalent of YieldCurveUtils.withParallelShift will be required for discount curves
    MulticurveProviderDiscount multicurve = bundle.getMulticurveProvider();
    YieldCurve curve = (YieldCurve) multicurve.getCurve(curveName);
    YieldCurve shiftedCurve = YieldCurveUtils.withParallelShift(curve, _shiftAmount, _shiftType, "");
    MulticurveProviderDiscount shiftedMulticurve = MarketDataUtils.replaceCurve(multicurve, shiftedCurve);
    // If the original block bundle were reused, any sensitivity calcs using the curve would be wrong because
    // they would be relative to the unshifted curve. Deriving a new block bundle from the shifted curve
    // isn't practical. But apparently (according to Marc) it's a reasonable limitation - you shouldn't
    // expect to be able to shock a curve and get out the sensitivities to the shocked curve.
    // Providing an empty block bundle satisfies MulticurveBundle and ensures that sensitivity calculations
    // will fail.
    return new MulticurveBundle(shiftedMulticurve, new CurveBuildingBlockBundle());
  }

  @Override
  public Class<MulticurveBundle> getMarketDataType() {
    return MulticurveBundle.class;
  }

  @Override
  public Class<? extends MatchDetails> getMatchDetailsType() {
    return MulticurveMatchDetails.class;
  }

  @Override
  public PerturbationTarget getTargetType() {
    return PerturbationTarget.OUTPUT;
  }
  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code MulticurveOutputParallelShift}.
   * @return the meta-bean, not null
   */
  public static MulticurveOutputParallelShift.Meta meta() {
    return MulticurveOutputParallelShift.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(MulticurveOutputParallelShift.Meta.INSTANCE);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static MulticurveOutputParallelShift.Builder builder() {
    return new MulticurveOutputParallelShift.Builder();
  }

  private MulticurveOutputParallelShift(
      ShiftType shiftType,
      double shiftAmount) {
    JodaBeanUtils.notNull(shiftType, "shiftType");
    this._shiftType = shiftType;
    this._shiftAmount = shiftAmount;
  }

  @Override
  public MulticurveOutputParallelShift.Meta metaBean() {
    return MulticurveOutputParallelShift.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the shiftType.
   * @return the value of the property, not null
   */
  private ShiftType getShiftType() {
    return _shiftType;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the shiftAmount.
   * @return the value of the property
   */
  private double getShiftAmount() {
    return _shiftAmount;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      MulticurveOutputParallelShift other = (MulticurveOutputParallelShift) obj;
      return JodaBeanUtils.equal(getShiftType(), other.getShiftType()) &&
          JodaBeanUtils.equal(getShiftAmount(), other.getShiftAmount());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(getShiftType());
    hash = hash * 31 + JodaBeanUtils.hashCode(getShiftAmount());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(96);
    buf.append("MulticurveOutputParallelShift{");
    buf.append("shiftType").append('=').append(getShiftType()).append(',').append(' ');
    buf.append("shiftAmount").append('=').append(JodaBeanUtils.toString(getShiftAmount()));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code MulticurveOutputParallelShift}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code shiftType} property.
     */
    private final MetaProperty<ShiftType> _shiftType = DirectMetaProperty.ofImmutable(
        this, "shiftType", MulticurveOutputParallelShift.class, ShiftType.class);
    /**
     * The meta-property for the {@code shiftAmount} property.
     */
    private final MetaProperty<Double> _shiftAmount = DirectMetaProperty.ofImmutable(
        this, "shiftAmount", MulticurveOutputParallelShift.class, Double.TYPE);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "shiftType",
        "shiftAmount");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 893345500:  // shiftType
          return _shiftType;
        case -1043480710:  // shiftAmount
          return _shiftAmount;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public MulticurveOutputParallelShift.Builder builder() {
      return new MulticurveOutputParallelShift.Builder();
    }

    @Override
    public Class<? extends MulticurveOutputParallelShift> beanType() {
      return MulticurveOutputParallelShift.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code shiftType} property.
     * @return the meta-property, not null
     */
    public MetaProperty<ShiftType> shiftType() {
      return _shiftType;
    }

    /**
     * The meta-property for the {@code shiftAmount} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Double> shiftAmount() {
      return _shiftAmount;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 893345500:  // shiftType
          return ((MulticurveOutputParallelShift) bean).getShiftType();
        case -1043480710:  // shiftAmount
          return ((MulticurveOutputParallelShift) bean).getShiftAmount();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code MulticurveOutputParallelShift}.
   */
  public static final class Builder extends DirectFieldsBeanBuilder<MulticurveOutputParallelShift> {

    private ShiftType _shiftType;
    private double _shiftAmount;

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(MulticurveOutputParallelShift beanToCopy) {
      this._shiftType = beanToCopy.getShiftType();
      this._shiftAmount = beanToCopy.getShiftAmount();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 893345500:  // shiftType
          return _shiftType;
        case -1043480710:  // shiftAmount
          return _shiftAmount;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 893345500:  // shiftType
          this._shiftType = (ShiftType) newValue;
          break;
        case -1043480710:  // shiftAmount
          this._shiftAmount = (Double) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public MulticurveOutputParallelShift build() {
      return new MulticurveOutputParallelShift(
          _shiftType,
          _shiftAmount);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the {@code shiftType} property in the builder.
     * @param shiftType  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder shiftType(ShiftType shiftType) {
      JodaBeanUtils.notNull(shiftType, "shiftType");
      this._shiftType = shiftType;
      return this;
    }

    /**
     * Sets the {@code shiftAmount} property in the builder.
     * @param shiftAmount  the new value
     * @return this, for chaining, not null
     */
    public Builder shiftAmount(double shiftAmount) {
      this._shiftAmount = shiftAmount;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(96);
      buf.append("MulticurveOutputParallelShift.Builder{");
      buf.append("shiftType").append('=').append(JodaBeanUtils.toString(_shiftType)).append(',').append(' ');
      buf.append("shiftAmount").append('=').append(JodaBeanUtils.toString(_shiftAmount));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
