/**
 * Copyright (C) 2015 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.sesame.marketdata.scenarios;
/**
 * <p/>
 * Please see distribution for license.
 */

import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Sets;
import com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve;
import com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderDiscount;
import com.opengamma.sesame.MulticurveBundle;
import com.opengamma.sesame.marketdata.MarketDataId;
import com.opengamma.sesame.marketdata.MulticurveId;

import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.ImmutableConstructor;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

/**
 * Filter that matches curves in a {@link MulticurveBundle} based on whether they are curves used for forecasting.
 */
@BeanDefinition
public final class AllForecastingCurvesFilter implements MarketDataFilter, ImmutableBean {

  @ImmutableConstructor
  public AllForecastingCurvesFilter() {
  }

  @Override
  public Set<MulticurveMatchDetails> apply(MarketDataId<?> marketDataId) {
    MulticurveId id = (MulticurveId) marketDataId;
    MulticurveMetadata metadata = MulticurveMetadata.forConfiguration(id.resolveConfig());
    Set<MulticurveMatchDetails> filter = Sets.newHashSet();
    Set<String> curves = metadata.getForecastingCurveNames();
    
    for (String curveName : curves) {
      filter.add(StandardMatchDetails.multicurve(curveName));
    }
    return ImmutableSet.copyOf(filter);
  }

  @Override
  public Set<MulticurveMatchDetails> apply(MarketDataId<?> marketDataId, Object marketData) {
    final Set<MulticurveMatchDetails> result = Sets.newHashSet();
    MulticurveBundle multicurve = (MulticurveBundle) marketData;
    MulticurveProviderDiscount provider = multicurve.getMulticurveProvider();

    for (YieldAndDiscountCurve curve : provider.getForwardIborCurves().values()) {
      result.add(StandardMatchDetails.multicurve(curve.getName()));
    }
    for (YieldAndDiscountCurve curve : provider.getForwardONCurves().values()) {
      result.add(StandardMatchDetails.multicurve(curve.getName()));
    }

    return result;
  }

  @Override
  public Class<?> getMarketDataType() {
    return MulticurveBundle.class;
  }

  @Override
  public Class<MulticurveId> getMarketDataIdType() {
    return MulticurveId.class;
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code AllForecastingCurvesFilter}.
   * @return the meta-bean, not null
   */
  public static AllForecastingCurvesFilter.Meta meta() {
    return AllForecastingCurvesFilter.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(AllForecastingCurvesFilter.Meta.INSTANCE);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static AllForecastingCurvesFilter.Builder builder() {
    return new AllForecastingCurvesFilter.Builder();
  }

  @Override
  public AllForecastingCurvesFilter.Meta metaBean() {
    return AllForecastingCurvesFilter.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      return true;
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(32);
    buf.append("AllForecastingCurvesFilter{");
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code AllForecastingCurvesFilter}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null);

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    public AllForecastingCurvesFilter.Builder builder() {
      return new AllForecastingCurvesFilter.Builder();
    }

    @Override
    public Class<? extends AllForecastingCurvesFilter> beanType() {
      return AllForecastingCurvesFilter.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code AllForecastingCurvesFilter}.
   */
  public static final class Builder extends DirectFieldsBeanBuilder<AllForecastingCurvesFilter> {

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      throw new NoSuchElementException("Unknown property: " + propertyName);
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      throw new NoSuchElementException("Unknown property: " + propertyName);
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public AllForecastingCurvesFilter build() {
      return new AllForecastingCurvesFilter();
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      return "AllForecastingCurvesFilter.Builder{}";
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
