/**
 * Copyright (C) 2014 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.sesame;


import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.ImmutableConstructor;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.analytics.financial.provider.curve.CurveBuildingBlockBundle;
import com.opengamma.analytics.financial.provider.description.inflation.ParameterInflationProviderInterface;
import com.opengamma.util.ArgumentChecker;

/**
 * Simple wrapper class holding the results of a inflation provider calibration.
 */
@BeanDefinition
public final class InflationProviderBundle implements ImmutableBean {

  /**
   * The calibrated inflation provider bundle.
   */
  @PropertyDefinition(validate = "notNull")
  private final ParameterInflationProviderInterface _parameterInflationProvider;

  /**
   * The curve building blocks used to calibrate the curves.
   */
  @PropertyDefinition(validate = "notNull")
  private final CurveBuildingBlockBundle _curveBuildingBlockBundle;

  @ImmutableConstructor
  public InflationProviderBundle(ParameterInflationProviderInterface issuerProvider,
                                 CurveBuildingBlockBundle curveBuildingBlockBundle) {
    _parameterInflationProvider = ArgumentChecker.notNull(issuerProvider, "issuerProvider");
    _curveBuildingBlockBundle = ArgumentChecker.notNull(curveBuildingBlockBundle, "curveBuildingBlockBundle");
  }


  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code InflationProviderBundle}.
   * @return the meta-bean, not null
   */
  public static InflationProviderBundle.Meta meta() {
    return InflationProviderBundle.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(InflationProviderBundle.Meta.INSTANCE);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static InflationProviderBundle.Builder builder() {
    return new InflationProviderBundle.Builder();
  }

  @Override
  public InflationProviderBundle.Meta metaBean() {
    return InflationProviderBundle.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the calibrated inflation provider bundle.
   * @return the value of the property, not null
   */
  public ParameterInflationProviderInterface getParameterInflationProvider() {
    return _parameterInflationProvider;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the curve building blocks used to calibrate the curves.
   * @return the value of the property, not null
   */
  public CurveBuildingBlockBundle getCurveBuildingBlockBundle() {
    return _curveBuildingBlockBundle;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      InflationProviderBundle other = (InflationProviderBundle) obj;
      return JodaBeanUtils.equal(getParameterInflationProvider(), other.getParameterInflationProvider()) &&
          JodaBeanUtils.equal(getCurveBuildingBlockBundle(), other.getCurveBuildingBlockBundle());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(getParameterInflationProvider());
    hash = hash * 31 + JodaBeanUtils.hashCode(getCurveBuildingBlockBundle());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(96);
    buf.append("InflationProviderBundle{");
    buf.append("parameterInflationProvider").append('=').append(getParameterInflationProvider()).append(',').append(' ');
    buf.append("curveBuildingBlockBundle").append('=').append(JodaBeanUtils.toString(getCurveBuildingBlockBundle()));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code InflationProviderBundle}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code parameterInflationProvider} property.
     */
    private final MetaProperty<ParameterInflationProviderInterface> _parameterInflationProvider = DirectMetaProperty.ofImmutable(
        this, "parameterInflationProvider", InflationProviderBundle.class, ParameterInflationProviderInterface.class);
    /**
     * The meta-property for the {@code curveBuildingBlockBundle} property.
     */
    private final MetaProperty<CurveBuildingBlockBundle> _curveBuildingBlockBundle = DirectMetaProperty.ofImmutable(
        this, "curveBuildingBlockBundle", InflationProviderBundle.class, CurveBuildingBlockBundle.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "parameterInflationProvider",
        "curveBuildingBlockBundle");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 2029444242:  // parameterInflationProvider
          return _parameterInflationProvider;
        case 1604389548:  // curveBuildingBlockBundle
          return _curveBuildingBlockBundle;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public InflationProviderBundle.Builder builder() {
      return new InflationProviderBundle.Builder();
    }

    @Override
    public Class<? extends InflationProviderBundle> beanType() {
      return InflationProviderBundle.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code parameterInflationProvider} property.
     * @return the meta-property, not null
     */
    public MetaProperty<ParameterInflationProviderInterface> parameterInflationProvider() {
      return _parameterInflationProvider;
    }

    /**
     * The meta-property for the {@code curveBuildingBlockBundle} property.
     * @return the meta-property, not null
     */
    public MetaProperty<CurveBuildingBlockBundle> curveBuildingBlockBundle() {
      return _curveBuildingBlockBundle;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 2029444242:  // parameterInflationProvider
          return ((InflationProviderBundle) bean).getParameterInflationProvider();
        case 1604389548:  // curveBuildingBlockBundle
          return ((InflationProviderBundle) bean).getCurveBuildingBlockBundle();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code InflationProviderBundle}.
   */
  public static final class Builder extends DirectFieldsBeanBuilder<InflationProviderBundle> {

    private ParameterInflationProviderInterface _parameterInflationProvider;
    private CurveBuildingBlockBundle _curveBuildingBlockBundle;

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(InflationProviderBundle beanToCopy) {
      this._parameterInflationProvider = beanToCopy.getParameterInflationProvider();
      this._curveBuildingBlockBundle = beanToCopy.getCurveBuildingBlockBundle();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 2029444242:  // parameterInflationProvider
          return _parameterInflationProvider;
        case 1604389548:  // curveBuildingBlockBundle
          return _curveBuildingBlockBundle;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 2029444242:  // parameterInflationProvider
          this._parameterInflationProvider = (ParameterInflationProviderInterface) newValue;
          break;
        case 1604389548:  // curveBuildingBlockBundle
          this._curveBuildingBlockBundle = (CurveBuildingBlockBundle) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public InflationProviderBundle build() {
      return new InflationProviderBundle(
          _parameterInflationProvider,
          _curveBuildingBlockBundle);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the {@code parameterInflationProvider} property in the builder.
     * @param parameterInflationProvider  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder parameterInflationProvider(ParameterInflationProviderInterface parameterInflationProvider) {
      JodaBeanUtils.notNull(parameterInflationProvider, "parameterInflationProvider");
      this._parameterInflationProvider = parameterInflationProvider;
      return this;
    }

    /**
     * Sets the {@code curveBuildingBlockBundle} property in the builder.
     * @param curveBuildingBlockBundle  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder curveBuildingBlockBundle(CurveBuildingBlockBundle curveBuildingBlockBundle) {
      JodaBeanUtils.notNull(curveBuildingBlockBundle, "curveBuildingBlockBundle");
      this._curveBuildingBlockBundle = curveBuildingBlockBundle;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(96);
      buf.append("InflationProviderBundle.Builder{");
      buf.append("parameterInflationProvider").append('=').append(JodaBeanUtils.toString(_parameterInflationProvider)).append(',').append(' ');
      buf.append("curveBuildingBlockBundle").append('=').append(JodaBeanUtils.toString(_curveBuildingBlockBundle));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
