===============
Tracing Capture
===============

Introduction
============
The engine supports the automatic capture of tracing information for cells in a view.
The traces can be captured with varying levels of detail and can be queried
programmatically or pretty printed to a console.

Configuration
=============
To enable the tracing, two steps are required. First, the tracing proxy needs
to be added to the set of function services in the ``ViewFactoryComponentFactory``'s ini
file.

.. code::

   [engine]
   factory = com.opengamma.sesame.component.ViewFactoryComponentFactory
   classifier = main
   ...
   defaultFunctionServices = CACHING,TRACING

Note that with caching enabled it may be that the results of function calls
are retrieved from the cache rather than calculated. If this is not what is
desired either remove the caching proxy in the configuration above or use JMX
to clear the cache before running a trace.

The second step is to request tracing for particular cells or outputs
via the cycle arguments used to run a view.

The available tracing levels are defined in the ``TraceType`` enum in the
``CycleArguments`` class.

Usage
=====

TIMINGS_ONLY
------------
This trace type records timings for all functions called during a run
but captures no other information about the calls. A sample output
is shown below:

.. code::

  DiscountingMulticurveBundleResolverFn.generateBundle() in 463805581ns
   `--DiscountingMulticurveBundleFn.generateBundle() in 460701398ns
       |--FXMatrixFn.getFXMatrix() in 20774825ns
       |--CurveSpecificationFn.getCurveSpecification() in 2812046ns
       |--CurveSpecificationMarketDataFn.requestData() in 881489ns
       |   |--MarketDataFn.getCurveNodeValue() in 273769ns
       |   |--MarketDataFn.getCurveNodeValue() in 18323ns
       |   |--MarketDataFn.getCurveNodeValue() in 17631ns
       |   |--MarketDataFn.getCurveNodeValue() in 18498ns
       |   |--MarketDataFn.getCurveNodeValue() in 13651ns
       |   |--MarketDataFn.getCurveNodeValue() in 12601ns
       |   |--MarketDataFn.getCurveNodeValue() in 13206ns
       |   |--MarketDataFn.getCurveNodeValue() in 210471ns
       |   |--MarketDataFn.getCurveNodeValue() in 24580ns
       |   |--MarketDataFn.getCurveNodeValue() in 11943ns
       |   |--MarketDataFn.getCurveNodeValue() in 10130ns
       |   |--MarketDataFn.getCurveNodeValue() in 9992ns
       |   |--MarketDataFn.getCurveNodeValue() in 9737ns
       |   |--MarketDataFn.getCurveNodeValue() in 12080ns
       |   |--MarketDataFn.getCurveNodeValue() in 11147ns
       |   |--MarketDataFn.getCurveNodeValue() in 9945ns
       |   `--MarketDataFn.getCurveNodeValue() in 9766ns
       |--CurveNodeConverterFn.getDerivative() in 11501482ns
       |--CurveNodeConverterFn.getDerivative() in 24503ns
       |--CurveNodeConverterFn.getDerivative() in 960256ns
       |--CurveNodeConverterFn.getDerivative() in 46007ns
       |--CurveNodeConverterFn.getDerivative() in 56451ns
       |--CurveNodeConverterFn.getDerivative() in 61630ns
       |--CurveNodeConverterFn.getDerivative() in 34618ns
       |--CurveNodeConverterFn.getDerivative() in 333287ns
       |--CurveNodeConverterFn.getDerivative() in 134246ns
       |--CurveNodeConverterFn.getDerivative() in 123583ns
       |--CurveNodeConverterFn.getDerivative() in 172039ns
       |--CurveNodeConverterFn.getDerivative() in 142932ns
       |--CurveNodeConverterFn.getDerivative() in 156915ns
       |--CurveNodeConverterFn.getDerivative() in 181427ns
       |--CurveNodeConverterFn.getDerivative() in 175788ns
       |--CurveNodeConverterFn.getDerivative() in 192109ns
       |--CurveNodeConverterFn.getDerivative() in 210619ns
       |--CurveSpecificationFn.getCurveSpecification() in 1419930ns
       |--CurveSpecificationMarketDataFn.requestData() in 290346ns
       |   |--MarketDataFn.getCurveNodeValue() in 40773ns
       |   |--MarketDataFn.getCurveNodeValue() in 10282ns
       |   |--MarketDataFn.getCurveNodeValue() in 9572ns
       |   |--MarketDataFn.getCurveNodeValue() in 11656ns
       |   |--MarketDataFn.getCurveNodeValue() in 11519ns
       |   |--MarketDataFn.getCurveNodeValue() in 8973ns
       |   |--MarketDataFn.getCurveNodeValue() in 8697ns
       |   |--MarketDataFn.getCurveNodeValue() in 10982ns
       |   |--MarketDataFn.getCurveNodeValue() in 12034ns
       |   |--MarketDataFn.getCurveNodeValue() in 10505ns
       |   |--MarketDataFn.getCurveNodeValue() in 9209ns
       |   |--MarketDataFn.getCurveNodeValue() in 9908ns
       |   |--MarketDataFn.getCurveNodeValue() in 13192ns
       |   |--MarketDataFn.getCurveNodeValue() in 8864ns
       |   `--MarketDataFn.getCurveNodeValue() in 11250ns
       |--CurveNodeConverterFn.getDerivative() in 113942ns
       |--CurveNodeConverterFn.getDerivative() in 320601ns
       |--CurveNodeConverterFn.getDerivative() in 31554ns
       |--CurveNodeConverterFn.getDerivative() in 349920ns
       |--CurveNodeConverterFn.getDerivative() in 182203ns
       |--CurveNodeConverterFn.getDerivative() in 256416ns
       |--CurveNodeConverterFn.getDerivative() in 276575ns
       |--CurveNodeConverterFn.getDerivative() in 366553ns
       |--CurveNodeConverterFn.getDerivative() in 435943ns
       |--CurveNodeConverterFn.getDerivative() in 530664ns
       |--CurveNodeConverterFn.getDerivative() in 572834ns
       |--CurveNodeConverterFn.getDerivative() in 776374ns
       |--CurveNodeConverterFn.getDerivative() in 954383ns
       |--CurveNodeConverterFn.getDerivative() in 1156900ns
       `--CurveNodeConverterFn.getDerivative() in 1304600ns

FULL_AS_STRING
--------------
This trace type records timings for all functions and also the inputs and
outputs of each function. To allow traces to be sent from remote
servers all arguments and return values are converted to strings.
A truncated sample output is shown below:

.. code::

  DiscountingMulticurveBundleResolverFn.generateBundle() -> SuccessResult{value=MulticurveBundle{multicurveProvider=[USD-ON-OIS, USD-LIBOR3M-FRAIRS], curveBuildingBlockBundle=com.opengamma.analytics.financial.provider.curve.CurveBuildingBlockBundle@48351a26}} in 773060131ns, args: [com.opengamma.sesame.engine.EngineEnvironment@5c42c2bd, CurveConstructionConfiguration{uniqueId=null, name=USD_ON-OIS_LIBOR3M-FRAIRS_1U, curveGroups=[CurveGroupConfiguration{order=0, typesForCurves={USD-ON-OIS=[OvernightCurveTypeConfiguration{convention=OG_TICKER~USD Fed Funds}, DiscountingCurveTypeConfiguration{reference=USD}], USD-LIBOR3M-FRAIRS=[IborCurveTypeConfiguration{convention=SEC~USD 3M IRS Ibor Leg, tenor=Tenor[P3M]}]}}], exogenousConfigurations=[]}]
   `--DiscountingMulticurveBundleFn.generateBundle() -> SuccessResult{value=MulticurveBundle{multicurveProvider=[USD-ON-OIS, USD-LIBOR3M-FRAIRS], curveBuildingBlockBundle=com.opengamma.analytics.financial.provider.curve.CurveBuildingBlockBundle@48351a26}} in 770071483ns, args: [com.opengamma.sesame.engine.EngineEnvironment@5c42c2bd, CurveConstructionConfiguration{uniqueId=null, name=USD_ON-OIS_LIBOR3M-FRAIRS_1U, curveGroups=[CurveGroupConfiguration{order=0, typesForCurves={USD-ON-OIS=[OvernightCurveTypeConfiguration{convention=OG_TICKER~USD Fed Funds}, DiscountingCurveTypeConfiguration{reference=USD}], USD-LIBOR3M-FRAIRS=[IborCurveTypeConfiguration{convention=SEC~USD 3M IRS Ibor Leg, tenor=Tenor[P3M]}]}}], exogenousConfigurations=[]}, {}]
       |--FXMatrixFn.getFXMatrix() -> SuccessResult{value=[] - {}} in 35735537ns, args: [com.opengamma.sesame.engine.EngineEnvironment@5c42c2bd, CurveConstructionConfiguration{uniqueId=null, name=USD_ON-OIS_LIBOR3M-FRAIRS_1U, curveGroups=[CurveGroupConfiguration{order=0, typesForCurves={USD-ON-OIS=[OvernightCurveTypeConfiguration{convention=OG_TICKER~USD Fed Funds}, DiscountingCurveTypeConfiguration{reference=USD}], USD-LIBOR3M-FRAIRS=[IborCurveTypeConfiguration{convention=SEC~USD 3M IRS Ibor Leg, tenor=Tenor[P3M]}]}}], exogenousConfigurations=[]}]
       |--CurveSpecificationFn.getCurveSpecification() -> SuccessResult{value=InterpolatedCurveSpecification[_interpolatorName=Linear,_rightExtrapolatorName=FlatExtrapolator,_leftExtrapolatorName=FlatExtrapolator,_nodes=[CurveNodeWithIdentifier{curveNode=CashNode{curveNodeIdMapperName=Test USD Discounting Mapper, name=null, startTenor=Tenor[P0D], maturityTenor=Tenor[OVERNIGHT], convention=CONVENTION~USD DepositON}, identifier=Ticker~D1, dataField=Market_Value, fieldType=OUTRIGHT}, CurveNodeWithIdentifier{curveNode=CashNode{curveNodeIdMapperName=Test USD Discounting Overnight Mapper, name=null, startTenor=Tenor[OVERNIGHT], maturityTenor=Tenor[OVERNIGHT], convention=CONVENTION~USD DepositON}, identifier=Ticker~D2, dataField=Market_Value, fieldType=OUTRIGHT}, CurveNodeWithIdentifier{curveNode=SwapNode{curveNodeIdMapperName=Test USD Discounting Mapper, name=null, startTenor=Tenor[P0D], maturityTenor=Tenor[P1M], payLegConvention=CONVENTION~USD 1Y Pay Lag Fixed Leg, receiveLegConvention=CONVENTION~USD OIS Overnight Leg, useFixings=true}, identifier=Ticker~D3, dataField=Market_Value, fieldType=OUTRIGHT}, CurveNodeWithIdentifier{curveNode=SwapNode{curveNodeIdMapperName=Test USD Discounting Mapper, name=null, startTenor=Tenor[P0D], maturityTenor=Tenor[P2M], payLegConvention=CONVENTION~USD 1Y Pay Lag Fixed Leg, receiveLegConvention=CONVENTION~USD OIS Overnight Leg, useFixings=true}, identifier=Ticker~D4, dataField=Market_Value, fieldType=OUTRIGHT}, CurveNodeWithIdentifier{curveNode=SwapNode{curveNodeIdMapperName=Test USD Discounting Mapper, name=null, startTenor=Tenor[P0D], maturityTenor=Tenor[P3M], payLegConvention=CONVENTION~USD 1Y Pay Lag Fixed Leg, receiveLegConvention=CONVENTION~USD OIS Overnight Leg, useFixings=true}, identifier=Ticker~D5, dataField=Market_Value, fieldType=OUTRIGHT}, CurveNodeWithIdentifier{curveNode=SwapNode{curveNodeIdMapperName=Test USD Discounting Mapper, name=null, startTenor=Tenor[P0D], maturityTenor=Tenor[P6M], payLegConvention=CONVENTION~USD 1Y Pay Lag Fixed Leg, receiveLegConvention=CONVENTION~USD OIS Overnight Leg, useFixings=true}, identifier=Ticker~D6, dataField=Market_Value, fieldType=OUTRIGHT}, CurveNodeWithIdentifier{curveNode=SwapNode{curveNodeIdMapperName=Test USD Discounting Mapper, name=null, startTenor=Tenor[P0D], maturityTenor=Tenor[P9M], payLegConvention=CONVENTION~USD 1Y Pay Lag Fixed Leg, receiveLegConvention=CONVENTION~USD OIS Overnight Leg, useFixings=true}, identifier=Ticker~D7, dataField=Market_Value, fieldType=OUTRIGHT}, CurveNodeWithIdentifier{curveNode=SwapNode{curveNodeIdMapperName=Test USD Discounting Mapper, name=null, startTenor=Tenor[P0D], maturityTenor=Tenor[P1Y], payLegConvention=CONVENTION~USD 1Y Pay Lag Fixed Leg, receiveLegConvention=CONVENTION~USD OIS Overnight Leg, useFixings=true}, identifier=Ticker~D8, dataField=Market_Value, fieldType=OUTRIGHT}, CurveNodeWithIdentifier{curveNode=SwapNode{curveNodeIdMapperName=Test USD Discounting Mapper, name=null, startTenor=Tenor[P0D], maturityTenor=Tenor[P2Y], payLegConvention=CONVENTION~USD 1Y Pay Lag Fixed Leg, receiveLegConvention=CONVENTION~USD OIS Overnight Leg, useFixings=true}, identifier=Ticker~D9, dataField=Market_Value, fieldType=OUTRIGHT}, CurveNodeWithIdentifier{curveNode=SwapNode{curveNodeIdMapperName=Test USD Discounting Mapper, name=null, startTenor=Tenor[P0D], maturityTenor=Tenor[P3Y], payLegConvention=CONVENTION~USD 1Y Pay Lag Fixed Leg, receiveLegConvention=CONVENTION~USD OIS Overnight Leg, useFixings=true}, identifier=Ticker~D10, dataField=Market_Value, fieldType=OUTRIGHT}, CurveNodeWithIdentifier{curveNode=SwapNode{curveNodeIdMapperName=Test USD Discounting Mapper, name=null, startTenor=Tenor[P0D], maturityTenor=Tenor[P4Y], payLegConvention=CONVENTION~USD 1Y Pay Lag Fixed Leg, receiveLegConvention=CONVENTION~USD OIS Overnight Leg, useFixings=true}, identifier=Ticker~D11, dataField=Market_Value, fieldType=OUTRIGHT}, CurveNodeWithIdentifier{curveNode=SwapNode{curveNodeIdMapperName=Test USD Discounting Mapper, name=null, startTenor=Tenor[P0D], maturityTenor=Tenor[P5Y], payLegConvention=CONVENTION~USD 1Y Pay Lag Fixed Leg, receiveLegConvention=CONVENTION~USD OIS Overnight Leg, useFixings=true}, identifier=Ticker~D12, dataField=Market_Value, fieldType=OUTRIGHT}, CurveNodeWithIdentifier{curveNode=SwapNode{curveNodeIdMapperName=Test USD Discounting Mapper, name=null, startTenor=Tenor[P0D], maturityTenor=Tenor[P6Y], payLegConvention=CONVENTION~USD 1Y Pay Lag Fixed Leg, receiveLegConvention=CONVENTION~USD OIS Overnight Leg, useFixings=true}, identifier=Ticker~D13, dataField=Market_Value, fieldType=OUTRIGHT}, CurveNodeWithIdentifier{curveNode=SwapNode{curveNodeIdMapperName=Test USD Discounting Mapper, name=null, startTenor=Tenor[P0D], maturityTenor=Tenor[P7Y], payLegConvention=CONVENTION~USD 1Y Pay Lag Fixed Leg, receiveLegConvention=CONVENTION~USD OIS Overnight Leg, useFixings=true}, identifier=Ticker~D14, dataField=Market_Value, fieldType=OUTRIGHT}, CurveNodeWithIdentifier{curveNode=SwapNode{curveNodeIdMapperName=Test USD Discounting Mapper, name=null, startTenor=Tenor[P0D], maturityTenor=Tenor[P8Y], payLegConvention=CONVENTION~USD 1Y Pay Lag Fixed Leg, receiveLegConvention=CONVENTION~USD OIS Overnight Leg, useFixings=true}, identifier=Ticker~D15, dataField=Market_Value, fieldType=OUTRIGHT}, CurveNodeWithIdentifier{curveNode=SwapNode{curveNodeIdMapperName=Test USD Discounting Mapper, name=null, startTenor=Tenor[P0D], maturityTenor=Tenor[P9Y], payLegConvention=CONVENTION~USD 1Y Pay Lag Fixed Leg, receiveLegConvention=CONVENTION~USD OIS Overnight Leg, useFixings=true}, identifier=Ticker~D16, dataField=Market_Value, fieldType=OUTRIGHT}, CurveNodeWithIdentifier{curveNode=SwapNode{curveNodeIdMapperName=Test USD Discounting Mapper, name=null, startTenor=Tenor[P0D], maturityTenor=Tenor[P10Y], payLegConvention=CONVENTION~USD 1Y Pay Lag Fixed Leg, receiveLegConvention=CONVENTION~USD OIS Overnight Leg, useFixings=true}, identifier=Ticker~D17, dataField=Market_Value, fieldType=OUTRIGHT}],_curveDate=2014-08-15,_name=USD-ON-OIS]} in 5682152ns, args: [com.opengamma.sesame.engine.EngineEnvironment@5c42c2bd, InterpolatedCurveDefinition{uniqueId=null, name=USD-ON-OIS, nodes=[CashNode{curveNodeIdMapperName=Test USD Discounting Mapper, name=null, startTenor=Tenor[P0D], maturityTenor=Tenor[OVERNIGHT], convention=CONVENTION~USD DepositON}, CashNode{curveNodeIdMapperName=Test USD Discounting Overnight Mapper, name=null, startTenor=Tenor[OVERNIGHT], maturityTenor=Tenor[OVERNIGHT], convention=CONVENTION~USD DepositON}, SwapNode{curveNodeIdMapperName=Test USD Discounting Mapper, name=null, startTenor=Tenor[P0D], maturityTenor=Tenor[P1M], payLegConvention=CONVENTION~USD 1Y Pay Lag Fixed Leg, receiveLegConvention=CONVENTION~USD OIS Overnight Leg, useFixings=true}, SwapNode{curveNodeIdMapperName=Test USD Discounting Mapper, name=null, startTenor=Tenor[P0D], maturityTenor=Tenor[P2M], payLegConvention=CONVENTION~USD 1Y Pay Lag Fixed Leg, receiveLegConvention=CONVENTION~USD OIS Overnight Leg, useFixings=true}, SwapNode{curveNodeIdMapperName=Test USD Discounting Mapper, name=null, startTenor=Tenor[P0D], maturityTenor=Tenor[P3M], payLegConvention=CONVENTION~USD 1Y Pay Lag Fixed Leg, receiveLegConvention=CONVENTION~USD OIS Overnight Leg, useFixings=true}, SwapNode{curveNodeIdMapperName=Test USD Discounting Mapper, name=null, startTenor=Tenor[P0D], maturityTenor=Tenor[P6M], payLegConvention=CONVENTION~USD 1Y Pay Lag Fixed Leg, receiveLegConvention=CONVENTION~USD OIS Overnight Leg, useFixings=true}, SwapNode{curveNodeIdMapperName=Test USD Discounting Mapper, name=null, startTenor=Tenor[P0D], maturityTenor=Tenor[P9M], payLegConvention=CONVENTION~USD 1Y Pay Lag Fixed Leg, receiveLegConvention=CONVENTION~USD OIS Overnight Leg, useFixings=true}, SwapNode{curveNodeIdMapperName=Test USD Discounting Mapper, name=null, startTenor=Tenor[P0D], maturityTenor=Tenor[P1Y], payLegConvention=CONVENTION~USD 1Y Pay Lag Fixed Leg, receiveLegConvention=CONVENTION~USD OIS Overnight Leg, useFixings=true}, SwapNode{curveNodeIdMapperName=Test USD Discounting Mapper, name=null, startTenor=Tenor[P0D], maturityTenor=Tenor[P2Y], payLegConvention=CONVENTION~USD 1Y Pay Lag Fixed Leg, receiveLegConvention=CONVENTION~USD OIS Overnight Leg, useFixings=true}, SwapNode{curveNodeIdMapperName=Test USD Discounting Mapper, name=null, startTenor=Tenor[P0D], maturityTenor=Tenor[P3Y], payLegConvention=CONVENTION~USD 1Y Pay Lag Fixed Leg, receiveLegConvention=CONVENTION~USD OIS Overnight Leg, useFixings=true}, SwapNode{curveNodeIdMapperName=Test USD Discounting Mapper, name=null, startTenor=Tenor[P0D], maturityTenor=Tenor[P4Y], payLegConvention=CONVENTION~USD 1Y Pay Lag Fixed Leg, receiveLegConvention=CONVENTION~USD OIS Overnight Leg, useFixings=true}, SwapNode{curveNodeIdMapperName=Test USD Discounting Mapper, name=null, startTenor=Tenor[P0D], maturityTenor=Tenor[P5Y], payLegConvention=CONVENTION~USD 1Y Pay Lag Fixed Leg, receiveLegConvention=CONVENTION~USD OIS Overnight Leg, useFixings=true}, SwapNode{curveNodeIdMapperName=Test USD Discounting Mapper, name=null, startTenor=Tenor[P0D], maturityTenor=Tenor[P6Y], payLegConvention=CONVENTION~USD 1Y Pay Lag Fixed Leg, receiveLegConvention=CONVENTION~USD OIS Overnight Leg, useFixings=true}, SwapNode{curveNodeIdMapperName=Test USD Discounting Mapper, name=null, startTenor=Tenor[P0D], maturityTenor=Tenor[P7Y], payLegConvention=CONVENTION~USD 1Y Pay Lag Fixed Leg, receiveLegConvention=CONVENTION~USD OIS Overnight Leg, useFixings=true}, SwapNode{curveNodeIdMapperName=Test USD Discounting Mapper, name=null, startTenor=Tenor[P0D], maturityTenor=Tenor[P8Y], payLegConvention=CONVENTION~USD 1Y Pay Lag Fixed Leg, receiveLegConvention=CONVENTION~USD OIS Overnight Leg, useFixings=true}, SwapNode{curveNodeIdMapperName=Test USD Discounting Mapper, name=null, startTenor=Tenor[P0D], maturityTenor=Tenor[P9Y], payLegConvention=CONVENTION~USD 1Y Pay Lag Fixed Leg, receiveLegConvention=CONVENTION~USD OIS Overnight Leg, useFixings=true}, SwapNode{curveNodeIdMapperName=Test USD Discounting Mapper, name=null, startTenor=Tenor[P0D], maturityTenor=Tenor[P10Y], payLegConvention=CONVENTION~USD 1Y Pay Lag Fixed Leg, receiveLegConvention=CONVENTION~USD OIS Overnight Leg, useFixings=true}], interpolatorName=Linear, rightExtrapolatorName=FlatExtrapolator, leftExtrapolatorName=FlatExtrapolator}]
       |--CurveSpecificationMarketDataFn.requestData() -> SuccessResult{value={Bundle[Ticker~D14]=0.02111, Bundle[Ticker~D11]=0.011215, Bundle[Ticker~D12]=0.01515, Bundle[Ticker~D10]=0.00704, Bundle[Ticker~D13]=0.018455, Bundle[Ticker~D3]=7.2E-4, Bundle[Ticker~D1]=0.0016, Bundle[Ticker~D15]=0.02332, Bundle[Ticker~D2]=0.0016, Bundle[Ticker~D16]=0.025135, Bundle[Ticker~D8]=0.001185, Bundle[Ticker~D9]=0.0031865, Bundle[Ticker~D17]=0.026685, Bundle[Ticker~D4]=8.2E-4, Bundle[Ticker~D7]=0.00105, Bundle[Ticker~D5]=9.3E-4, Bundle[Ticker~D6]=9.0E-4}} in 2108936ns, args: [com.opengamma.sesame.engine.EngineEnvironment@5c42c2bd, InterpolatedCurveSpecification[_interpolatorName=Linear,_rightExtrapolatorName=FlatExtrapolator,_leftExtrapolatorName=FlatExtrapolator,_nodes=[CurveNodeWithIdentifier{curveNode=CashNode{curveNodeIdMapperName=Test USD Discounting Mapper, name=null, startTenor=Tenor[P0D], maturityTenor=Tenor[OVERNIGHT], convention=CONVENTION~USD DepositON}, identifier=Ticker~D1, dataField=Market_Value, fieldType=OUTRIGHT}, CurveNodeWithIdentifier{curveNode=CashNode{curveNodeIdMapperName=Test USD Discounting Overnight Mapper, name=null, startTenor=Tenor[OVERNIGHT], maturityTenor=Tenor[OVERNIGHT], convention=CONVENTION~USD DepositON}, identifier=Ticker~D2, dataField=Market_Value, fieldType=OUTRIGHT}, CurveNodeWithIdentifier{curveNode=SwapNode{curveNodeIdMapperName=Test USD Discounting Mapper, name=null, startTenor=Tenor[P0D], maturityTenor=Tenor[P1M], payLegConvention=CONVENTION~USD 1Y Pay Lag Fixed Leg, receiveLegConvention=CONVENTION~USD OIS Overnight Leg, useFixings=true}, identifier=Ticker~D3, dataField=Market_Value, fieldType=OUTRIGHT}, CurveNodeWithIdentifier{curveNode=SwapNode{curveNodeIdMapperName=Test USD Discounting Mapper, name=null, startTenor=Tenor[P0D], maturityTenor=Tenor[P2M], payLegConvention=CONVENTION~USD 1Y Pay Lag Fixed Leg, receiveLegConvention=CONVENTION~USD OIS Overnight Leg, useFixings=true}, identifier=Ticker~D4, dataField=Market_Value, fieldType=OUTRIGHT}, CurveNodeWithIdentifier{curveNode=SwapNode{curveNodeIdMapperName=Test USD Discounting Mapper, name=null, startTenor=Tenor[P0D], maturityTenor=Tenor[P3M], payLegConvention=CONVENTION~USD 1Y Pay Lag Fixed Leg, receiveLegConvention=CONVENTION~USD OIS Overnight Leg, useFixings=true}, identifier=Ticker~D5, dataField=Market_Value, fieldType=OUTRIGHT}, CurveNodeWithIdentifier{curveNode=SwapNode{curveNodeIdMapperName=Test USD Discounting Mapper, name=null, startTenor=Tenor[P0D], maturityTenor=Tenor[P6M], payLegConvention=CONVENTION~USD 1Y Pay Lag Fixed Leg, receiveLegConvention=CONVENTION~USD OIS Overnight Leg, useFixings=true}, identifier=Ticker~D6, dataField=Market_Value, fieldType=OUTRIGHT}, CurveNodeWithIdentifier{curveNode=SwapNode{curveNodeIdMapperName=Test USD Discounting Mapper, name=null, startTenor=Tenor[P0D], maturityTenor=Tenor[P9M], payLegConvention=CONVENTION~USD 1Y Pay Lag Fixed Leg, receiveLegConvention=CONVENTION~USD OIS Overnight Leg, useFixings=true}, identifier=Ticker~D7, dataField=Market_Value, fieldType=OUTRIGHT}, CurveNodeWithIdentifier{curveNode=SwapNode{curveNodeIdMapperName=Test USD Discounting Mapper, name=null, startTenor=Tenor[P0D], maturityTenor=Tenor[P1Y], payLegConvention=CONVENTION~USD 1Y Pay Lag Fixed Leg, receiveLegConvention=CONVENTION~USD OIS Overnight Leg, useFixings=true}, identifier=Ticker~D8, dataField=Market_Value, fieldType=OUTRIGHT}, CurveNodeWithIdentifier{curveNode=SwapNode{curveNodeIdMapperName=Test USD Discounting Mapper, name=null, startTenor=Tenor[P0D], maturityTenor=Tenor[P2Y], payLegConvention=CONVENTION~USD 1Y Pay Lag Fixed Leg, receiveLegConvention=CONVENTION~USD OIS Overnight Leg, useFixings=true}, identifier=Ticker~D9, dataField=Market_Value, fieldType=OUTRIGHT}, CurveNodeWithIdentifier{curveNode=SwapNode{curveNodeIdMapperName=Test USD Discounting Mapper, name=null, startTenor=Tenor[P0D], maturityTenor=Tenor[P3Y], payLegConvention=CONVENTION~USD 1Y Pay Lag Fixed Leg, receiveLegConvention=CONVENTION~USD OIS Overnight Leg, useFixings=true}, identifier=Ticker~D10, dataField=Market_Value, fieldType=OUTRIGHT}, CurveNodeWithIdentifier{curveNode=SwapNode{curveNodeIdMapperName=Test USD Discounting Mapper, name=null, startTenor=Tenor[P0D], maturityTenor=Tenor[P4Y], payLegConvention=CONVENTION~USD 1Y Pay Lag Fixed Leg, receiveLegConvention=CONVENTION~USD OIS Overnight Leg, useFixings=true}, identifier=Ticker~D11, dataField=Market_Value, fieldType=OUTRIGHT}, CurveNodeWithIdentifier{curveNode=SwapNode{curveNodeIdMapperName=Test USD Discounting Mapper, name=null, startTenor=Tenor[P0D], maturityTenor=Tenor[P5Y], payLegConvention=CONVENTION~USD 1Y Pay Lag Fixed Leg, receiveLegConvention=CONVENTION~USD OIS Overnight Leg, useFixings=true}, identifier=Ticker~D12, dataField=Market_Value, fieldType=OUTRIGHT}, CurveNodeWithIdentifier{curveNode=SwapNode{curveNodeIdMapperName=Test USD Discounting Mapper, name=null, startTenor=Tenor[P0D], maturityTenor=Tenor[P6Y], payLegConvention=CONVENTION~USD 1Y Pay Lag Fixed Leg, receiveLegConvention=CONVENTION~USD OIS Overnight Leg, useFixings=true}, identifier=Ticker~D13, dataField=Market_Value, fieldType=OUTRIGHT}, CurveNodeWithIdentifier{curveNode=SwapNode{curveNodeIdMapperName=Test USD Discounting Mapper, name=null, startTenor=Tenor[P0D], maturityTenor=Tenor[P7Y], payLegConvention=CONVENTION~USD 1Y Pay Lag Fixed Leg, receiveLegConvention=CONVENTION~USD OIS Overnight Leg, useFixings=true}, identifier=Ticker~D14, dataField=Market_Value, fieldType=OUTRIGHT}, CurveNodeWithIdentifier{curveNode=SwapNode{curveNodeIdMapperName=Test USD Discounting Mapper, name=null, startTenor=Tenor[P0D], maturityTenor=Tenor[P8Y], payLegConvention=CONVENTION~USD 1Y Pay Lag Fixed Leg, receiveLegConvention=CONVENTION~USD OIS Overnight Leg, useFixings=true}, identifier=Ticker~D15, dataField=Market_Value, fieldType=OUTRIGHT}, CurveNodeWithIdentifier{curveNode=SwapNode{curveNodeIdMapperName=Test USD Discounting Mapper, name=null, startTenor=Tenor[P0D], maturityTenor=Tenor[P9Y], payLegConvention=CONVENTION~USD 1Y Pay Lag Fixed Leg, receiveLegConvention=CONVENTION~USD OIS Overnight Leg, useFixings=true}, identifier=Ticker~D16, dataField=Market_Value, fieldType=OUTRIGHT}, CurveNodeWithIdentifier{curveNode=SwapNode{curveNodeIdMapperName=Test USD Discounting Mapper, name=null, startTenor=Tenor[P0D], maturityTenor=Tenor[P10Y], payLegConvention=CONVENTION~USD 1Y Pay Lag Fixed Leg, receiveLegConvention=CONVENTION~USD OIS Overnight Leg, useFixings=true}, identifier=Ticker~D17, dataField=Market_Value, fieldType=OUTRIGHT}],_curveDate=2014-08-15,_name=USD-ON-OIS]]
       |   |--MarketDataFn.getCurveNodeValue() -> SuccessResult{value=0.0016} in 1064803ns, args: [com.opengamma.sesame.engine.EngineEnvironment@5c42c2bd, CurveNodeWithIdentifier{curveNode=CashNode{curveNodeIdMapperName=Test USD Discounting Mapper, name=null, startTenor=Tenor[P0D], maturityTenor=Tenor[OVERNIGHT], convention=CONVENTION~USD DepositON}, identifier=Ticker~D1, dataField=Market_Value, fieldType=OUTRIGHT}]
       |   |--MarketDataFn.getCurveNodeValue() -> SuccessResult{value=0.0016} in 41464ns, args: [com.opengamma.sesame.engine.EngineEnvironment@5c42c2bd, CurveNodeWithIdentifier{curveNode=CashNode{curveNodeIdMapperName=Test USD Discounting Overnight Mapper, name=null, startTenor=Tenor[OVERNIGHT], maturityTenor=Tenor[OVERNIGHT], convention=CONVENTION~USD DepositON}, identifier=Ticker~D2, dataField=Market_Value, fieldType=OUTRIGHT}]
       |   |--MarketDataFn.getCurveNodeValue() -> SuccessResult{value=7.2E-4} in 29587ns, args: [com.opengamma.sesame.engine.EngineEnvironment@5c42c2bd, CurveNodeWithIdentifier{curveNode=SwapNode{curveNodeIdMapperName=Test USD Discounting Mapper, name=null, startTenor=Tenor[P0D], maturityTenor=Tenor[P1M], payLegConvention=CONVENTION~USD 1Y Pay Lag Fixed Leg, receiveLegConvention=CONVENTION~USD OIS Overnight Leg, useFixings=true}, identifier=Ticker~D3, dataField=Market_Value, fieldType=OUTRIGHT}]
       |   |--MarketDataFn.getCurveNodeValue() -> SuccessResult{value=8.2E-4} in 23940ns, args: [com.opengamma.sesame.engine.EngineEnvironment@5c42c2bd, CurveNodeWithIdentifier{curveNode=SwapNode{curveNodeIdMapperName=Test USD Discounting Mapper, name=null, startTenor=Tenor[P0D], maturityTenor=Tenor[P2M], payLegConvention=CONVENTION~USD 1Y Pay Lag Fixed Leg, receiveLegConvention=CONVENTION~USD OIS Overnight Leg, useFixings=true}, identifier=Ticker~D4, dataField=Market_Value, fieldType=OUTRIGHT}]
       |   |--MarketDataFn.getCurveNodeValue() -> SuccessResult{value=9.3E-4} in 22313ns, args: [com.opengamma.sesame.engine.EngineEnvironment@5c42c2bd, CurveNodeWithIdentifier{curveNode=SwapNode{curveNodeIdMapperName=Test USD Discounting Mapper, name=null, startTenor=Tenor[P0D], maturityTenor=Tenor[P3M], payLegConvention=CONVENTION~USD 1Y Pay Lag Fixed Leg, receiveLegConvention=CONVENTION~USD OIS Overnight Leg, useFixings=true}, identifier=Ticker~D5, dataField=Market_Value, fieldType=OUTRIGHT}]
       |   |--MarketDataFn.getCurveNodeValue() -> SuccessResult{value=9.0E-4} in 22500ns, args: [com.opengamma.sesame.engine.EngineEnvironment@5c42c2bd, CurveNodeWithIdentifier{curveNode=SwapNode{curveNodeIdMapperName=Test USD Discounting Mapper, name=null, startTenor=Tenor[P0D], maturityTenor=Tenor[P6M], payLegConvention=CONVENTION~USD 1Y Pay Lag Fixed Leg, receiveLegConvention=CONVENTION~USD OIS Overnight Leg, useFixings=true}, identifier=Ticker~D6, dataField=Market_Value, fieldType=OUTRIGHT}]
       |   |--MarketDataFn.getCurveNodeValue() -> SuccessResult{value=0.00105} in 23577ns, args: [com.opengamma.sesame.engine.EngineEnvironment@5c42c2bd, CurveNodeWithIdentifier{curveNode=SwapNode{curveNodeIdMapperName=Test USD Discounting Mapper, name=null, startTenor=Tenor[P0D], maturityTenor=Tenor[P9M], payLegConvention=CONVENTION~USD 1Y Pay Lag Fixed Leg, receiveLegConvention=CONVENTION~USD OIS Overnight Leg, useFixings=true}, identifier=Ticker~D7, dataField=Market_Value, fieldType=OUTRIGHT}]
       |   |--MarketDataFn.getCurveNodeValue() -> SuccessResult{value=0.001185} in 307981ns, args: [com.opengamma.sesame.engine.EngineEnvironment@5c42c2bd, CurveNodeWithIdentifier{curveNode=SwapNode{curveNodeIdMapperName=Test USD Discounting Mapper, name=null, startTenor=Tenor[P0D], maturityTenor=Tenor[P1Y], payLegConvention=CONVENTION~USD 1Y Pay Lag Fixed Leg, receiveLegConvention=CONVENTION~USD OIS Overnight Leg, useFixings=true}, identifier=Ticker~D8, dataField=Market_Value, fieldType=OUTRIGHT}]
       |   |--MarketDataFn.getCurveNodeValue() -> SuccessResult{value=0.0031865} in 38366ns, args: [com.opengamma.sesame.engine.EngineEnvironment@5c42c2bd, CurveNodeWithIdentifier{curveNode=SwapNode{curveNodeIdMapperName=Test USD Discounting Mapper, name=null, startTenor=Tenor[P0D], maturityTenor=Tenor[P2Y], payLegConvention=CONVENTION~USD 1Y Pay Lag Fixed Leg, receiveLegConvention=CONVENTION~USD OIS Overnight Leg, useFixings=true}, identifier=Ticker~D9, dataField=Market_Value, fieldType=OUTRIGHT}]
       |   |--MarketDataFn.getCurveNodeValue() -> SuccessResult{value=0.00704} in 16979ns, args: [com.opengamma.sesame.engine.EngineEnvironment@5c42c2bd, CurveNodeWithIdentifier{curveNode=SwapNode{curveNodeIdMapperName=Test USD Discounting Mapper, name=null, startTenor=Tenor[P0D], maturityTenor=Tenor[P3Y], payLegConvention=CONVENTION~USD 1Y Pay Lag Fixed Leg, receiveLegConvention=CONVENTION~USD OIS Overnight Leg, useFixings=true}, identifier=Ticker~D10, dataField=Market_Value, fieldType=OUTRIGHT}]
       |   |--MarketDataFn.getCurveNodeValue() -> SuccessResult{value=0.011215} in 16517ns, args: [com.opengamma.sesame.engine.EngineEnvironment@5c42c2bd, CurveNodeWithIdentifier{curveNode=SwapNode{curveNodeIdMapperName=Test USD Discounting Mapper, name=null, startTenor=Tenor[P0D], maturityTenor=Tenor[P4Y], payLegConvention=CONVENTION~USD 1Y Pay Lag Fixed Leg, receiveLegConvention=CONVENTION~USD OIS Overnight Leg, useFixings=true}, identifier=Ticker~D11, dataField=Market_Value, fieldType=OUTRIGHT}]
       |   |--MarketDataFn.getCurveNodeValue() -> SuccessResult{value=0.01515} in 16158ns, args: [com.opengamma.sesame.engine.EngineEnvironment@5c42c2bd, CurveNodeWithIdentifier{curveNode=SwapNode{curveNodeIdMapperName=Test USD Discounting Mapper, name=null, startTenor=Tenor[P0D], maturityTenor=Tenor[P5Y], payLegConvention=CONVENTION~USD 1Y Pay Lag Fixed Leg, receiveLegConvention=CONVENTION~USD OIS Overnight Leg, useFixings=true}, identifier=Ticker~D12, dataField=Market_Value, fieldType=OUTRIGHT}]
       |   |--MarketDataFn.getCurveNodeValue() -> SuccessResult{value=0.018455} in 16407ns, args: [com.opengamma.sesame.engine.EngineEnvironment@5c42c2bd, CurveNodeWithIdentifier{curveNode=SwapNode{curveNodeIdMapperName=Test USD Discounting Mapper, name=null, startTenor=Tenor[P0D], maturityTenor=Tenor[P6Y], payLegConvention=CONVENTION~USD 1Y Pay Lag Fixed Leg, receiveLegConvention=CONVENTION~USD OIS Overnight Leg, useFixings=true}, identifier=Ticker~D13, dataField=Market_Value, fieldType=OUTRIGHT}]
       |   |--MarketDataFn.getCurveNodeValue() -> SuccessResult{value=0.02111} in 20508ns, args: [com.opengamma.sesame.engine.EngineEnvironment@5c42c2bd, CurveNodeWithIdentifier{curveNode=SwapNode{curveNodeIdMapperName=Test USD Discounting Mapper, name=null, startTenor=Tenor[P0D], maturityTenor=Tenor[P7Y], payLegConvention=CONVENTION~USD 1Y Pay Lag Fixed Leg, receiveLegConvention=CONVENTION~USD OIS Overnight Leg, useFixings=true}, identifier=Ticker~D14, dataField=Market_Value, fieldType=OUTRIGHT}]
       |   |--MarketDataFn.getCurveNodeValue() -> SuccessResult{value=0.02332} in 19090ns, args: [com.opengamma.sesame.engine.EngineEnvironment@5c42c2bd, CurveNodeWithIdentifier{curveNode=SwapNode{curveNodeIdMapperName=Test USD Discounting Mapper, name=null, startTenor=Tenor[P0D], maturityTenor=Tenor[P8Y], payLegConvention=CONVENTION~USD 1Y Pay Lag Fixed Leg, receiveLegConvention=CONVENTION~USD OIS Overnight Leg, useFixings=true}, identifier=Ticker~D15, dataField=Market_Value, fieldType=OUTRIGHT}]
       |   |--MarketDataFn.getCurveNodeValue() -> SuccessResult{value=0.025135} in 16614ns, args: [com.opengamma.sesame.engine.EngineEnvironment@5c42c2bd, CurveNodeWithIdentifier{curveNode=SwapNode{curveNodeIdMapperName=Test USD Discounting Mapper, name=null, startTenor=Tenor[P0D], maturityTenor=Tenor[P9Y], payLegConvention=CONVENTION~USD 1Y Pay Lag Fixed Leg, receiveLegConvention=CONVENTION~USD OIS Overnight Leg, useFixings=true}, identifier=Ticker~D16, dataField=Market_Value, fieldType=OUTRIGHT}]
       |   `--MarketDataFn.getCurveNodeValue() -> SuccessResult{value=0.026685} in 16501ns, args: [com.opengamma.sesame.engine.EngineEnvironment@5c42c2bd, CurveNodeWithIdentifier{curveNode=SwapNode{curveNodeIdMapperName=Test USD Discounting Mapper, name=null, startTenor=Tenor[P0D], maturityTenor=Tenor[P10Y], payLegConvention=CONVENTION~USD 1Y Pay Lag Fixed Leg, receiveLegConvention=CONVENTION~USD OIS Overnight Leg, useFixings=true}, identifier=Ticker~D17, dataField=Market_Value, fieldType=OUTRIGHT}]
       |--CurveNodeConverterFn.getDerivative() -> SuccessResult{value=Cash USD[0.0 - 0.00821917808219178], r: 0.0016, notional: 1.0, curve: null} in 19154905ns, args: [com.opengamma.sesame.engine.EngineEnvironment@5c42c2bd, CurveNodeWithIdentifier{curveNode=CashNode{curveNodeIdMapperName=Test USD Discounting Mapper, name=null, startTenor=Tenor[P0D], maturityTenor=Tenor[OVERNIGHT], convention=CONVENTION~USD DepositON}, identifier=Ticker~D1, dataField=Market_Value, fieldType=OUTRIGHT}, Deposit USD [2014-08-15T17:16:11.860Z - 2014-08-18T17:16:11.860Z] - notional: 1.0 - rate: 0.0016, 2014-08-15T17:16:11.860Z]
       `--CurveNodeConverterFn.getDerivative() -> SuccessResult{value=Cash USD[0.00821917808219178 - 0.010958904109589041], r: 0.0016, notional: 1.0, curve: null} in 28185ns, args: [com.opengamma.sesame.engine.EngineEnvironment@5c42c2bd, CurveNodeWithIdentifier{curveNode=CashNode{curveNodeIdMapperName=Test USD Discounting Overnight Mapper, name=null, startTenor=Tenor[OVERNIGHT], maturityTenor=Tenor[OVERNIGHT], convention=CONVENTION~USD DepositON}, identifier=Ticker~D2, dataField=Market_Value, fieldType=OUTRIGHT}, Deposit USD [2014-08-18T17:16:11.860Z - 2014-08-19T17:16:11.860Z] - notional: 1.0 - rate: 0.0016, 2014-08-15T17:16:11.860Z]

FULL
----
This trace type records timings for all functions and also the inputs and
outputs of each function. This is intended for programmatic use as there
is no guarantee that the values are serializable so cannot be sent remotely.

The pretty printed version of the output is identical to that produced by
``FULL_AS_STRING``.
